// -------------------------------------------------------------
// 
// File Name: C:\Users\Carlos Cajas\Desktop\DSP\nuevo_chale\FDHT_N\Complex4Multiply_block1.v
// Created: 2020-12-08 16:13:17
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Complex4Multiply_block1
// Source Path: FDHT_N/FDHT/DFT-2/RADIX22FFT_SDF1_3/Complex4Multiply
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Complex4Multiply_block1
          (clk,
           reset_x,
           enb,
           din_3_1_re_dly,
           din_3_1_im_dly,
           din_3_vld_dly,
           twdl_3_1_re,
           twdl_3_1_im,
           softReset,
           dinXTwdl_re,
           dinXTwdl_im,
           dinXTwdl_3_1_vld);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [40:0] din_3_1_re_dly;  // sfix41_En28
  input   signed [40:0] din_3_1_im_dly;  // sfix41_En28
  input   din_3_vld_dly;
  input   signed [40:0] twdl_3_1_re;  // sfix41_En39
  input   signed [40:0] twdl_3_1_im;  // sfix41_En39
  input   softReset;
  output  signed [40:0] dinXTwdl_re;  // sfix41_En28
  output  signed [40:0] dinXTwdl_im;  // sfix41_En28
  output  dinXTwdl_3_1_vld;

  reg signed [40:0] din_re_reg;  // sfix41_En28
  reg signed [40:0] din_im_reg;  // sfix41_En28
  reg signed [40:0] twdl_re_reg;  // sfix41_En39
  reg signed [40:0] twdl_im_reg;  // sfix41_En39
  reg signed [40:0] Complex4Multiply_din1_re_pipe1;  // sfix41
  reg signed [40:0] Complex4Multiply_din1_im_pipe1;  // sfix41
  reg signed [81:0] Complex4Multiply_mult1_re_pipe1;  // sfix82
  reg signed [81:0] Complex4Multiply_mult2_re_pipe1;  // sfix82
  reg signed [81:0] Complex4Multiply_mult1_im_pipe1;  // sfix82
  reg signed [81:0] Complex4Multiply_mult2_im_pipe1;  // sfix82
  reg signed [40:0] Complex4Multiply_twiddle_re_pipe1;  // sfix41
  reg signed [40:0] Complex4Multiply_twiddle_im_pipe1;  // sfix41
  reg signed [81:0] prod1_re;  // sfix82_En67
  reg signed [81:0] prod1_im;  // sfix82_En67
  reg signed [81:0] prod2_re;  // sfix82_En67
  reg signed [81:0] prod2_im;  // sfix82_En67
  reg  din_vld_dly1;
  reg  din_vld_dly2;
  reg  din_vld_dly3;
  reg  prod_vld;
  reg signed [82:0] Complex4Add_multRes_re_reg;  // sfix83
  reg signed [82:0] Complex4Add_multRes_im_reg;  // sfix83
  reg  Complex4Add_prod_vld_reg1;
  reg signed [81:0] Complex4Add_prod1_re_reg;  // sfix82
  reg signed [81:0] Complex4Add_prod1_im_reg;  // sfix82
  reg signed [81:0] Complex4Add_prod2_re_reg;  // sfix82
  reg signed [81:0] Complex4Add_prod2_im_reg;  // sfix82
  wire signed [82:0] Complex4Add_multRes_re_reg_next;  // sfix83_En67
  wire signed [82:0] Complex4Add_multRes_im_reg_next;  // sfix83_En67
  wire signed [82:0] Complex4Add_sub_cast;  // sfix83_En67
  wire signed [82:0] Complex4Add_sub_cast_1;  // sfix83_En67
  wire signed [82:0] Complex4Add_add_cast;  // sfix83_En67
  wire signed [82:0] Complex4Add_add_cast_1;  // sfix83_En67
  wire signed [82:0] mulResFP_re;  // sfix83_En67
  wire signed [82:0] mulResFP_im;  // sfix83_En67
  reg  dinXTwdl_3_1_vld_1;

  initial begin
    Complex4Multiply_din1_re_pipe1 = 41'sh00000000000;
    Complex4Multiply_din1_im_pipe1 = 41'sh00000000000;
    Complex4Multiply_twiddle_re_pipe1 = 41'sh00000000000;
    Complex4Multiply_twiddle_im_pipe1 = 41'sh00000000000;
    Complex4Multiply_mult1_re_pipe1 = 82'sh000000000000000000000;
    Complex4Multiply_mult2_re_pipe1 = 82'sh000000000000000000000;
    Complex4Multiply_mult1_im_pipe1 = 82'sh000000000000000000000;
    Complex4Multiply_mult2_im_pipe1 = 82'sh000000000000000000000;
    prod1_re = 82'sh000000000000000000000;
    prod2_re = 82'sh000000000000000000000;
    prod1_im = 82'sh000000000000000000000;
    prod2_im = 82'sh000000000000000000000;
  end

  always @(posedge clk)
    begin : intdelay_process
      if (reset_x == 1'b1) begin
        din_re_reg <= 41'sh00000000000;
      end
      else begin
        if (enb) begin
          din_re_reg <= din_3_1_re_dly;
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_1_process
      if (reset_x == 1'b1) begin
        din_im_reg <= 41'sh00000000000;
      end
      else begin
        if (enb) begin
          din_im_reg <= din_3_1_im_dly;
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_2_process
      if (reset_x == 1'b1) begin
        twdl_re_reg <= 41'sh00000000000;
      end
      else begin
        if (enb) begin
          twdl_re_reg <= twdl_3_1_re;
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_3_process
      if (reset_x == 1'b1) begin
        twdl_im_reg <= 41'sh00000000000;
      end
      else begin
        if (enb) begin
          twdl_im_reg <= twdl_3_1_im;
        end
      end
    end



  // Complex4Multiply
  always @(posedge clk)
    begin : Complex4Multiply_process
      if (enb) begin
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
      end
    end



  always @(posedge clk)
    begin : intdelay_4_process
      if (reset_x == 1'b1) begin
        din_vld_dly1 <= 1'b0;
      end
      else begin
        if (enb) begin
          din_vld_dly1 <= din_3_vld_dly;
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_5_process
      if (reset_x == 1'b1) begin
        din_vld_dly2 <= 1'b0;
      end
      else begin
        if (enb) begin
          din_vld_dly2 <= din_vld_dly1;
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_6_process
      if (reset_x == 1'b1) begin
        din_vld_dly3 <= 1'b0;
      end
      else begin
        if (enb) begin
          din_vld_dly3 <= din_vld_dly2;
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_7_process
      if (reset_x == 1'b1) begin
        prod_vld <= 1'b0;
      end
      else begin
        if (enb) begin
          prod_vld <= din_vld_dly3;
        end
      end
    end



  // Complex4Add
  always @(posedge clk)
    begin : Complex4Add_process
      if (reset_x == 1'b1) begin
        Complex4Add_multRes_re_reg <= 83'sh000000000000000000000;
        Complex4Add_multRes_im_reg <= 83'sh000000000000000000000;
        Complex4Add_prod1_re_reg <= 82'sh000000000000000000000;
        Complex4Add_prod1_im_reg <= 82'sh000000000000000000000;
        Complex4Add_prod2_re_reg <= 82'sh000000000000000000000;
        Complex4Add_prod2_im_reg <= 82'sh000000000000000000000;
        Complex4Add_prod_vld_reg1 <= 1'b0;
        dinXTwdl_3_1_vld_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
          Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
          Complex4Add_prod1_re_reg <= prod1_re;
          Complex4Add_prod1_im_reg <= prod1_im;
          Complex4Add_prod2_re_reg <= prod2_re;
          Complex4Add_prod2_im_reg <= prod2_im;
          dinXTwdl_3_1_vld_1 <= Complex4Add_prod_vld_reg1;
          Complex4Add_prod_vld_reg1 <= prod_vld;
        end
      end
    end

  assign Complex4Add_sub_cast = {Complex4Add_prod1_re_reg[81], Complex4Add_prod1_re_reg};
  assign Complex4Add_sub_cast_1 = {Complex4Add_prod2_re_reg[81], Complex4Add_prod2_re_reg};
  assign Complex4Add_multRes_re_reg_next = Complex4Add_sub_cast - Complex4Add_sub_cast_1;
  assign Complex4Add_add_cast = {Complex4Add_prod1_im_reg[81], Complex4Add_prod1_im_reg};
  assign Complex4Add_add_cast_1 = {Complex4Add_prod2_im_reg[81], Complex4Add_prod2_im_reg};
  assign Complex4Add_multRes_im_reg_next = Complex4Add_add_cast + Complex4Add_add_cast_1;
  assign mulResFP_re = Complex4Add_multRes_re_reg;
  assign mulResFP_im = Complex4Add_multRes_im_reg;



  assign dinXTwdl_re = mulResFP_re[79:39];



  assign dinXTwdl_im = mulResFP_im[79:39];



  assign dinXTwdl_3_1_vld = dinXTwdl_3_1_vld_1;

endmodule  // Complex4Multiply_block1

