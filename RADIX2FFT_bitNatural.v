// -------------------------------------------------------------
// 
// File Name: C:\Users\Carlos Cajas\Desktop\DSP\nuevo_chale\FDHT_N\RADIX2FFT_bitNatural.v
// Created: 2020-12-08 16:13:17
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RADIX2FFT_bitNatural
// Source Path: FDHT_N/FDHT/DFT/RADIX2FFT_bitNatural
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RADIX2FFT_bitNatural
          (clk,
           reset_x,
           enb,
           dout_6_1_re,
           dout_6_1_im,
           dout_6_1_vld,
           softReset,
           dout_re1,
           dout_im1,
           dout_vld1);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [14:0] dout_6_1_re;  // sfix15_En5
  input   signed [14:0] dout_6_1_im;  // sfix15_En5
  input   dout_6_1_vld;
  input   softReset;
  output  signed [14:0] dout_re1;  // sfix15_En5
  output  signed [14:0] dout_im1;  // sfix15_En5
  output  dout_vld1;

  reg [1:0] wrStateMachineBitNatural_wrState;  // ufix2
  reg [5:0] wrStateMachineBitNatural_wrAddrCnt;  // ufix6
  reg [1:0] wrStateMachineBitNatural_wrState_next;  // ufix2
  reg [5:0] wrStateMachineBitNatural_wrAddrCnt_next;  // ufix6
  reg  WrEnb;
  reg [5:0] wrAddr;  // ufix6
  reg [5:0] sampleIdx;  // ufix6
  reg [5:0] rdAddr;  // ufix6
  wire signed [14:0] memOut_im;  // sfix15_En5
  wire signed [14:0] memOut_re;  // sfix15_En5
  reg [1:0] rdStateMachineBitNatural_rdState;  // ufix2
  reg [5:0] rdStateMachineBitNatural_rdAddrCnt;  // ufix6
  reg  rdStateMachineBitNatural_doutVldReg1;
  reg  rdStateMachineBitNatural_doutVldReg2;
  reg signed [14:0] rdStateMachineBitNatural_doutReReg;  // sfix15
  reg signed [14:0] rdStateMachineBitNatural_doutImReg;  // sfix15
  reg [1:0] rdStateMachineBitNatural_rdState_next;  // ufix2
  reg [5:0] rdStateMachineBitNatural_rdAddrCnt_next;  // ufix6
  reg  rdStateMachineBitNatural_doutVldReg1_next;
  reg  rdStateMachineBitNatural_doutVldReg2_next;
  reg signed [14:0] rdStateMachineBitNatural_doutReReg_next;  // sfix15_En5
  reg signed [14:0] rdStateMachineBitNatural_doutImReg_next;  // sfix15_En5
  reg signed [14:0] dout_re1_1;  // sfix15_En5
  reg signed [14:0] dout_im1_1;  // sfix15_En5
  reg  dout_vld1_1;


  // wrStateMachineBitNatural
  always @(posedge clk)
    begin : wrStateMachineBitNatural_process
      if (reset_x == 1'b1) begin
        wrStateMachineBitNatural_wrState <= 2'b00;
        wrStateMachineBitNatural_wrAddrCnt <= 6'b000000;
      end
      else begin
        if (enb) begin
          wrStateMachineBitNatural_wrState <= wrStateMachineBitNatural_wrState_next;
          wrStateMachineBitNatural_wrAddrCnt <= wrStateMachineBitNatural_wrAddrCnt_next;
        end
      end
    end

  always @(wrStateMachineBitNatural_wrState, wrStateMachineBitNatural_wrAddrCnt,
       dout_6_1_vld) begin
    wrStateMachineBitNatural_wrState_next = wrStateMachineBitNatural_wrState;
    wrStateMachineBitNatural_wrAddrCnt_next = wrStateMachineBitNatural_wrAddrCnt;
    if (wrStateMachineBitNatural_wrState == 2'b10) begin
      wrAddr = {wrStateMachineBitNatural_wrAddrCnt[0], wrStateMachineBitNatural_wrAddrCnt[1], wrStateMachineBitNatural_wrAddrCnt[2], wrStateMachineBitNatural_wrAddrCnt[3], wrStateMachineBitNatural_wrAddrCnt[4], wrStateMachineBitNatural_wrAddrCnt[5]};
    end
    else begin
      wrAddr = wrStateMachineBitNatural_wrAddrCnt;
    end
    case ( wrStateMachineBitNatural_wrState)
      2'b00 :
        begin
          if (dout_6_1_vld) begin
            wrStateMachineBitNatural_wrState_next = 2'b01;
            wrStateMachineBitNatural_wrAddrCnt_next = 6'b000001;
          end
          else begin
            wrStateMachineBitNatural_wrState_next = 2'b00;
            wrStateMachineBitNatural_wrAddrCnt_next = 6'b000000;
          end
        end
      2'b01 :
        begin
          if (dout_6_1_vld) begin
            if (wrStateMachineBitNatural_wrAddrCnt == 6'b111111) begin
              wrStateMachineBitNatural_wrAddrCnt_next = 6'b000000;
              wrStateMachineBitNatural_wrState_next = 2'b10;
            end
            else begin
              wrStateMachineBitNatural_wrAddrCnt_next = wrStateMachineBitNatural_wrAddrCnt + 6'b000001;
              wrStateMachineBitNatural_wrState_next = 2'b01;
            end
          end
        end
      2'b10 :
        begin
          if (dout_6_1_vld) begin
            if (wrStateMachineBitNatural_wrAddrCnt == 6'b111111) begin
              wrStateMachineBitNatural_wrAddrCnt_next = 6'b000000;
              wrStateMachineBitNatural_wrState_next = 2'b01;
            end
            else begin
              wrStateMachineBitNatural_wrAddrCnt_next = wrStateMachineBitNatural_wrAddrCnt + 6'b000001;
              wrStateMachineBitNatural_wrState_next = 2'b10;
            end
          end
        end
      default :
        begin
          wrStateMachineBitNatural_wrState_next = 2'b00;
          wrStateMachineBitNatural_wrAddrCnt_next = 6'b000000;
        end
    endcase
    WrEnb = dout_6_1_vld;
    sampleIdx = wrStateMachineBitNatural_wrAddrCnt;
  end



  SimpleDualPortRAM_generic #(.AddrWidth(6),
                              .DataWidth(15)
                              )
                            u_dataMEM_im_1 (.clk(clk),
                                            .enb(enb),
                                            .wr_din(dout_6_1_im),
                                            .wr_addr(wrAddr),
                                            .wr_en(WrEnb),
                                            .rd_addr(rdAddr),
                                            .rd_dout(memOut_im)
                                            );

  SimpleDualPortRAM_generic #(.AddrWidth(6),
                              .DataWidth(15)
                              )
                            u_dataMEM_re_1 (.clk(clk),
                                            .enb(enb),
                                            .wr_din(dout_6_1_re),
                                            .wr_addr(wrAddr),
                                            .wr_en(WrEnb),
                                            .rd_addr(rdAddr),
                                            .rd_dout(memOut_re)
                                            );

  // rdStateMachineBitNatural
  always @(posedge clk)
    begin : rdStateMachineBitNatural_process
      if (reset_x == 1'b1) begin
        rdStateMachineBitNatural_rdState <= 2'b00;
        rdStateMachineBitNatural_rdAddrCnt <= 6'b000000;
        rdStateMachineBitNatural_doutVldReg1 <= 1'b0;
        rdStateMachineBitNatural_doutVldReg2 <= 1'b0;
        rdStateMachineBitNatural_doutReReg <= 15'sb000000000000000;
        rdStateMachineBitNatural_doutImReg <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          rdStateMachineBitNatural_rdState <= rdStateMachineBitNatural_rdState_next;
          rdStateMachineBitNatural_rdAddrCnt <= rdStateMachineBitNatural_rdAddrCnt_next;
          rdStateMachineBitNatural_doutVldReg1 <= rdStateMachineBitNatural_doutVldReg1_next;
          rdStateMachineBitNatural_doutVldReg2 <= rdStateMachineBitNatural_doutVldReg2_next;
          rdStateMachineBitNatural_doutReReg <= rdStateMachineBitNatural_doutReReg_next;
          rdStateMachineBitNatural_doutImReg <= rdStateMachineBitNatural_doutImReg_next;
        end
      end
    end

  always @(rdStateMachineBitNatural_rdState, rdStateMachineBitNatural_rdAddrCnt,
       rdStateMachineBitNatural_doutVldReg1,
       rdStateMachineBitNatural_doutVldReg2, rdStateMachineBitNatural_doutReReg,
       rdStateMachineBitNatural_doutImReg, sampleIdx, memOut_re, memOut_im) begin
    rdStateMachineBitNatural_rdState_next = rdStateMachineBitNatural_rdState;
    rdStateMachineBitNatural_rdAddrCnt_next = rdStateMachineBitNatural_rdAddrCnt;
    rdStateMachineBitNatural_doutReReg_next = rdStateMachineBitNatural_doutReReg;
    rdStateMachineBitNatural_doutImReg_next = rdStateMachineBitNatural_doutImReg;
    if (rdStateMachineBitNatural_rdState == 2'b01) begin
      rdAddr = {rdStateMachineBitNatural_rdAddrCnt[0], rdStateMachineBitNatural_rdAddrCnt[1], rdStateMachineBitNatural_rdAddrCnt[2], rdStateMachineBitNatural_rdAddrCnt[3], rdStateMachineBitNatural_rdAddrCnt[4], rdStateMachineBitNatural_rdAddrCnt[5]};
    end
    else begin
      rdAddr = rdStateMachineBitNatural_rdAddrCnt;
    end
    case ( rdStateMachineBitNatural_rdState)
      2'b00 :
        begin
          rdStateMachineBitNatural_doutVldReg1_next = 1'b0;
          if (sampleIdx >= 6'b110101) begin
            rdStateMachineBitNatural_rdAddrCnt_next = 6'b000001;
            rdStateMachineBitNatural_doutVldReg1_next = 1'b1;
            rdStateMachineBitNatural_rdState_next = 2'b01;
          end
          else begin
            rdStateMachineBitNatural_rdAddrCnt_next = 6'b000000;
            rdStateMachineBitNatural_rdState_next = 2'b00;
          end
        end
      2'b01 :
        begin
          rdStateMachineBitNatural_doutVldReg1_next = 1'b1;
          if (rdStateMachineBitNatural_rdAddrCnt == 6'b111111) begin
            rdStateMachineBitNatural_rdAddrCnt_next = 6'b000000;
            rdStateMachineBitNatural_rdState_next = 2'b10;
          end
          else begin
            rdStateMachineBitNatural_rdAddrCnt_next = rdStateMachineBitNatural_rdAddrCnt + 6'b000001;
            rdStateMachineBitNatural_rdState_next = 2'b01;
          end
        end
      2'b10 :
        begin
          rdStateMachineBitNatural_doutVldReg1_next = 1'b0;
          if (sampleIdx >= 6'b110101) begin
            rdStateMachineBitNatural_rdAddrCnt_next = 6'b000001;
            rdStateMachineBitNatural_doutVldReg1_next = 1'b1;
            rdStateMachineBitNatural_rdState_next = 2'b11;
          end
          else begin
            rdStateMachineBitNatural_rdAddrCnt_next = 6'b000000;
            rdStateMachineBitNatural_rdState_next = 2'b10;
          end
        end
      2'b11 :
        begin
          rdStateMachineBitNatural_doutVldReg1_next = 1'b1;
          if (rdStateMachineBitNatural_rdAddrCnt == 6'b111111) begin
            rdStateMachineBitNatural_rdAddrCnt_next = 6'b000000;
            rdStateMachineBitNatural_rdState_next = 2'b00;
          end
          else begin
            rdStateMachineBitNatural_rdAddrCnt_next = rdStateMachineBitNatural_rdAddrCnt + 6'b000001;
            rdStateMachineBitNatural_rdState_next = 2'b11;
          end
        end
      default :
        begin
          rdStateMachineBitNatural_rdState_next = 2'b00;
          rdStateMachineBitNatural_rdAddrCnt_next = 6'b000000;
          rdStateMachineBitNatural_doutVldReg1_next = 1'b0;
        end
    endcase
    if (rdStateMachineBitNatural_doutVldReg1) begin
      rdStateMachineBitNatural_doutReReg_next = memOut_re;
      rdStateMachineBitNatural_doutImReg_next = memOut_im;
    end
    rdStateMachineBitNatural_doutVldReg2_next = rdStateMachineBitNatural_doutVldReg1;
    dout_re1_1 = rdStateMachineBitNatural_doutReReg;
    dout_im1_1 = rdStateMachineBitNatural_doutImReg;
    dout_vld1_1 = rdStateMachineBitNatural_doutVldReg2;
  end



  assign dout_re1 = dout_re1_1;

  assign dout_im1 = dout_im1_1;

  assign dout_vld1 = dout_vld1_1;

endmodule  // RADIX2FFT_bitNatural

