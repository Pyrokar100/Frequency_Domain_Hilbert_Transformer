// -------------------------------------------------------------
// 
// File Name: C:\Users\Carlos Cajas\Desktop\henkindama2\newhope_cambios\FDHT_tb.v
// Created: 2020-12-20 13:11:32
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.02
// Target subsystem base rate: 0.02
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.02
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// out1                          ce_out        0.02
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FDHT_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FDHT_tb;



  reg  clk;
  reg  reset_x;
  wire clk_enable;
  wire out1_done;  // ufix1
  wire rdEnb;
  wire out1_done_enb;  // ufix1
  reg [11:0] out1_addr;  // ufix12
  wire out1_active;  // ufix1
  reg [11:0] Scope1_boundary_DTC6_out1_addr;  // ufix12
  wire Scope1_boundary_DTC6_out1_active;  // ufix1
  reg  tb_enb_delay;
  wire Scope1_boundary_DTC6_out1_enb;  // ufix1
  wire [11:0] Scope1_boundary_DTC6_out1_addr_delay_1;  // ufix12
  reg signed [31:0] fp_in1;  // sfix32
  reg signed [14:0] rawData_in1;  // sfix15_En5
  reg signed [31:0] status_in1;  // sfix32
  reg signed [14:0] holdData_in1;  // sfix15_En5
  reg signed [14:0] in1_offset;  // sfix15_En5
  wire signed [14:0] in1;  // sfix15_En5
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  wire ce_out;
  wire signed [14:0] out1;  // sfix15_En5
  wire out1_enb;  // ufix1
  wire out1_lastAddr;  // ufix1
  wire [11:0] out1_addr_delay_1;  // ufix12
  reg signed [31:0] fp_out1_expected;  // sfix32
  reg signed [14:0] out1_expected;  // sfix15_En5
  reg signed [31:0] status_out1_expected;  // sfix32
  wire signed [14:0] out1_ref;  // sfix15_En5
  reg  out1_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign out1_done_enb = out1_done & rdEnb;



  assign out1_active = out1_addr != 12'b100111000100;



  assign Scope1_boundary_DTC6_out1_active = Scope1_boundary_DTC6_out1_addr != 12'b100111000100;



  assign Scope1_boundary_DTC6_out1_enb = Scope1_boundary_DTC6_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2500
  always @(posedge clk)
    begin : Scope1_boundary_DTC6_process
      if (reset_x == 1'b1) begin
        Scope1_boundary_DTC6_out1_addr <= 12'b000000000000;
      end
      else begin
        if (Scope1_boundary_DTC6_out1_enb) begin
          if (Scope1_boundary_DTC6_out1_addr >= 12'b100111000100) begin
            Scope1_boundary_DTC6_out1_addr <= 12'b000000000000;
          end
          else begin
            Scope1_boundary_DTC6_out1_addr <= Scope1_boundary_DTC6_out1_addr + 12'b000000000001;
          end
        end
      end
    end



  assign #1 Scope1_boundary_DTC6_out1_addr_delay_1 = Scope1_boundary_DTC6_out1_addr;

  // Data source for in1
  initial
    begin : in1_fileread
      fp_in1 = $fopen("in1.dat", "r");
      status_in1 = $rewind(fp_in1);
    end

  always @(Scope1_boundary_DTC6_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_in1 <= 15'bx;
      end
      else if (rdEnb == 1) begin
        status_in1 = $fscanf(fp_in1, "%h", rawData_in1);
      end
    end

  // holdData reg for Scope1_boundary_DTC6_out1
  always @(posedge clk)
    begin : stimuli_Scope1_boundary_DTC6_out1
      if (reset_x) begin
        holdData_in1 <= 15'bx;
      end
      else begin
        holdData_in1 <= rawData_in1;
      end
    end

  always @(rawData_in1 or rdEnb)
    begin : stimuli_Scope1_boundary_DTC6_out1_1
      if (rdEnb == 1'b0) begin
        in1_offset <= holdData_in1;
      end
      else begin
        in1_offset <= rawData_in1;
      end
    end

  assign #2 in1 = in1_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset_x;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk)
    begin : u_enable_delay
      if (reset_x) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (check1_done == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_x_gen
      reset_x <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset_x <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  FDHT u_FDHT (.clk(clk),
               .reset_x(reset_x),
               .clk_enable(clk_enable),
               .in1(in1),  // sfix15_En5
               .ce_out(ce_out),
               .out1(out1)  // sfix15_En5
               );

  assign out1_enb = ce_out & out1_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2500
  always @(posedge clk)
    begin : c_2_process
      if (reset_x == 1'b1) begin
        out1_addr <= 12'b000000000000;
      end
      else begin
        if (out1_enb) begin
          if (out1_addr >= 12'b100111000100) begin
            out1_addr <= 12'b000000000000;
          end
          else begin
            out1_addr <= out1_addr + 12'b000000000001;
          end
        end
      end
    end



  assign out1_lastAddr = out1_addr >= 12'b100111000100;



  assign out1_done = out1_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset_x) begin
        check1_done <= 0;
      end
      else begin
        if (out1_done_enb) begin
          check1_done <= out1_done;
        end
      end
    end

  assign #1 out1_addr_delay_1 = out1_addr;

  // Data source for out1_expected
  initial
    begin : out1_expected_fileread
      fp_out1_expected = $fopen("out1_expected.dat", "r");
      status_out1_expected = $rewind(fp_out1_expected);
    end

  always @(out1_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        out1_expected <= 15'bx;
      end
      else if (ce_out == 1) begin
        status_out1_expected = $fscanf(fp_out1_expected, "%h", out1_expected);
      end
    end

  assign out1_ref = out1_expected;

  always @(posedge clk)
    begin : out1_checker
      if (reset_x == 1'b1) begin
        out1_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && out1 !== out1_ref) begin
          out1_testFailure <= 1'b1;
          $display("ERROR in out1 at time %t : Expected '%h' Actual '%h'", $time, out1_ref, out1);
        end
      end
    end

  assign testFailure = out1_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // FDHT_tb

