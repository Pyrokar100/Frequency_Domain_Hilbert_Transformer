// -------------------------------------------------------------
// 
// File Name: C:\Users\Carlos Cajas\Desktop\henkindama2\newhope_cambios\generating_analytical_spectrum.v
// Created: 2020-12-20 13:10:05
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: generating_analytical_spectrum
// Source Path: newhope_cambios/FDHT/generating_analytical_spectrum
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module generating_analytical_spectrum
          (clk,
           reset_x,
           enb,
           X_0_re,
           X_0_im,
           X_1_re,
           X_1_im,
           X_2_re,
           X_2_im,
           X_3_re,
           X_3_im,
           X_4_re,
           X_4_im,
           X_5_re,
           X_5_im,
           X_6_re,
           X_6_im,
           X_7_re,
           X_7_im,
           X_8_re,
           X_8_im,
           X_9_re,
           X_9_im,
           X_10_re,
           X_10_im,
           X_11_re,
           X_11_im,
           X_12_re,
           X_12_im,
           X_13_re,
           X_13_im,
           X_14_re,
           X_14_im,
           X_15_re,
           X_15_im,
           X_16_re,
           X_16_im,
           X_17_re,
           X_17_im,
           X_18_re,
           X_18_im,
           X_19_re,
           X_19_im,
           X_20_re,
           X_20_im,
           X_21_re,
           X_21_im,
           X_22_re,
           X_22_im,
           X_23_re,
           X_23_im,
           X_24_re,
           X_24_im,
           Xc_0_re,
           Xc_0_im,
           Xc_1_re,
           Xc_1_im,
           Xc_2_re,
           Xc_2_im,
           Xc_3_re,
           Xc_3_im,
           Xc_4_re,
           Xc_4_im,
           Xc_5_re,
           Xc_5_im,
           Xc_6_re,
           Xc_6_im,
           Xc_7_re,
           Xc_7_im,
           Xc_8_re,
           Xc_8_im,
           Xc_9_re,
           Xc_9_im,
           Xc_10_re,
           Xc_10_im,
           Xc_11_re,
           Xc_11_im,
           Xc_12_re,
           Xc_12_im,
           Xc_13_re,
           Xc_13_im,
           Xc_14_re,
           Xc_14_im,
           Xc_15_re,
           Xc_15_im,
           Xc_16_re,
           Xc_16_im,
           Xc_17_re,
           Xc_17_im,
           Xc_18_re,
           Xc_18_im,
           Xc_19_re,
           Xc_19_im,
           Xc_20_re,
           Xc_20_im,
           Xc_21_re,
           Xc_21_im,
           Xc_22_re,
           Xc_22_im,
           Xc_23_re,
           Xc_23_im,
           Xc_24_re,
           Xc_24_im,
           Xc_0_1);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [36:0] X_0_re;  // sfix37_En22
  input   signed [36:0] X_0_im;  // sfix37_En22
  input   signed [36:0] X_1_re;  // sfix37_En22
  input   signed [36:0] X_1_im;  // sfix37_En22
  input   signed [36:0] X_2_re;  // sfix37_En22
  input   signed [36:0] X_2_im;  // sfix37_En22
  input   signed [36:0] X_3_re;  // sfix37_En22
  input   signed [36:0] X_3_im;  // sfix37_En22
  input   signed [36:0] X_4_re;  // sfix37_En22
  input   signed [36:0] X_4_im;  // sfix37_En22
  input   signed [36:0] X_5_re;  // sfix37_En22
  input   signed [36:0] X_5_im;  // sfix37_En22
  input   signed [36:0] X_6_re;  // sfix37_En22
  input   signed [36:0] X_6_im;  // sfix37_En22
  input   signed [36:0] X_7_re;  // sfix37_En22
  input   signed [36:0] X_7_im;  // sfix37_En22
  input   signed [36:0] X_8_re;  // sfix37_En22
  input   signed [36:0] X_8_im;  // sfix37_En22
  input   signed [36:0] X_9_re;  // sfix37_En22
  input   signed [36:0] X_9_im;  // sfix37_En22
  input   signed [36:0] X_10_re;  // sfix37_En22
  input   signed [36:0] X_10_im;  // sfix37_En22
  input   signed [36:0] X_11_re;  // sfix37_En22
  input   signed [36:0] X_11_im;  // sfix37_En22
  input   signed [36:0] X_12_re;  // sfix37_En22
  input   signed [36:0] X_12_im;  // sfix37_En22
  input   signed [36:0] X_13_re;  // sfix37_En22
  input   signed [36:0] X_13_im;  // sfix37_En22
  input   signed [36:0] X_14_re;  // sfix37_En22
  input   signed [36:0] X_14_im;  // sfix37_En22
  input   signed [36:0] X_15_re;  // sfix37_En22
  input   signed [36:0] X_15_im;  // sfix37_En22
  input   signed [36:0] X_16_re;  // sfix37_En22
  input   signed [36:0] X_16_im;  // sfix37_En22
  input   signed [36:0] X_17_re;  // sfix37_En22
  input   signed [36:0] X_17_im;  // sfix37_En22
  input   signed [36:0] X_18_re;  // sfix37_En22
  input   signed [36:0] X_18_im;  // sfix37_En22
  input   signed [36:0] X_19_re;  // sfix37_En22
  input   signed [36:0] X_19_im;  // sfix37_En22
  input   signed [36:0] X_20_re;  // sfix37_En22
  input   signed [36:0] X_20_im;  // sfix37_En22
  input   signed [36:0] X_21_re;  // sfix37_En22
  input   signed [36:0] X_21_im;  // sfix37_En22
  input   signed [36:0] X_22_re;  // sfix37_En22
  input   signed [36:0] X_22_im;  // sfix37_En22
  input   signed [36:0] X_23_re;  // sfix37_En22
  input   signed [36:0] X_23_im;  // sfix37_En22
  input   signed [36:0] X_24_re;  // sfix37_En22
  input   signed [36:0] X_24_im;  // sfix37_En22
  output  signed [36:0] Xc_0_re;  // sfix37_En22
  output  signed [36:0] Xc_0_im;  // sfix37_En22
  output  signed [36:0] Xc_1_re;  // sfix37_En22
  output  signed [36:0] Xc_1_im;  // sfix37_En22
  output  signed [36:0] Xc_2_re;  // sfix37_En22
  output  signed [36:0] Xc_2_im;  // sfix37_En22
  output  signed [36:0] Xc_3_re;  // sfix37_En22
  output  signed [36:0] Xc_3_im;  // sfix37_En22
  output  signed [36:0] Xc_4_re;  // sfix37_En22
  output  signed [36:0] Xc_4_im;  // sfix37_En22
  output  signed [36:0] Xc_5_re;  // sfix37_En22
  output  signed [36:0] Xc_5_im;  // sfix37_En22
  output  signed [36:0] Xc_6_re;  // sfix37_En22
  output  signed [36:0] Xc_6_im;  // sfix37_En22
  output  signed [36:0] Xc_7_re;  // sfix37_En22
  output  signed [36:0] Xc_7_im;  // sfix37_En22
  output  signed [36:0] Xc_8_re;  // sfix37_En22
  output  signed [36:0] Xc_8_im;  // sfix37_En22
  output  signed [36:0] Xc_9_re;  // sfix37_En22
  output  signed [36:0] Xc_9_im;  // sfix37_En22
  output  signed [36:0] Xc_10_re;  // sfix37_En22
  output  signed [36:0] Xc_10_im;  // sfix37_En22
  output  signed [36:0] Xc_11_re;  // sfix37_En22
  output  signed [36:0] Xc_11_im;  // sfix37_En22
  output  signed [36:0] Xc_12_re;  // sfix37_En22
  output  signed [36:0] Xc_12_im;  // sfix37_En22
  output  signed [36:0] Xc_13_re;  // sfix37_En22
  output  signed [36:0] Xc_13_im;  // sfix37_En22
  output  signed [36:0] Xc_14_re;  // sfix37_En22
  output  signed [36:0] Xc_14_im;  // sfix37_En22
  output  signed [36:0] Xc_15_re;  // sfix37_En22
  output  signed [36:0] Xc_15_im;  // sfix37_En22
  output  signed [36:0] Xc_16_re;  // sfix37_En22
  output  signed [36:0] Xc_16_im;  // sfix37_En22
  output  signed [36:0] Xc_17_re;  // sfix37_En22
  output  signed [36:0] Xc_17_im;  // sfix37_En22
  output  signed [36:0] Xc_18_re;  // sfix37_En22
  output  signed [36:0] Xc_18_im;  // sfix37_En22
  output  signed [36:0] Xc_19_re;  // sfix37_En22
  output  signed [36:0] Xc_19_im;  // sfix37_En22
  output  signed [36:0] Xc_20_re;  // sfix37_En22
  output  signed [36:0] Xc_20_im;  // sfix37_En22
  output  signed [36:0] Xc_21_re;  // sfix37_En22
  output  signed [36:0] Xc_21_im;  // sfix37_En22
  output  signed [36:0] Xc_22_re;  // sfix37_En22
  output  signed [36:0] Xc_22_im;  // sfix37_En22
  output  signed [36:0] Xc_23_re;  // sfix37_En22
  output  signed [36:0] Xc_23_im;  // sfix37_En22
  output  signed [36:0] Xc_24_re;  // sfix37_En22
  output  signed [36:0] Xc_24_im;  // sfix37_En22
  output  Xc_0_1;  // ufix1


  reg signed [36:0] Product1_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [2:0] Constant1_out1;  // sfix3
  reg signed [2:0] Constant1_out1_1;  // sfix3
  wire signed [39:0] Product1_mul_temp;  // sfix40_En22
  wire signed [36:0] Product1_Re;  // sfix37_En22
  reg signed [36:0] Product1_Re_1;  // sfix37_En22
  reg signed [36:0] Product1_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product11_mul_temp;  // sfix40_En22
  wire signed [36:0] Product1_Im;  // sfix37_En22
  reg signed [36:0] Product1_Im_1;  // sfix37_En22
  reg signed [36:0] Product2_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product2_mul_temp;  // sfix40_En22
  wire signed [36:0] Product2_Re;  // sfix37_En22
  reg signed [36:0] Product2_Re_1;  // sfix37_En22
  reg signed [36:0] Product2_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product21_mul_temp;  // sfix40_En22
  wire signed [36:0] Product2_Im;  // sfix37_En22
  reg signed [36:0] Product2_Im_1;  // sfix37_En22
  reg signed [36:0] Product3_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product3_mul_temp;  // sfix40_En22
  wire signed [36:0] Product3_Re;  // sfix37_En22
  reg signed [36:0] Product3_Re_1;  // sfix37_En22
  reg signed [36:0] Product3_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product31_mul_temp;  // sfix40_En22
  wire signed [36:0] Product3_Im;  // sfix37_En22
  reg signed [36:0] Product3_Im_1;  // sfix37_En22
  reg signed [36:0] Product4_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product4_mul_temp;  // sfix40_En22
  wire signed [36:0] Product4_Re;  // sfix37_En22
  reg signed [36:0] Product4_Re_1;  // sfix37_En22
  reg signed [36:0] Product4_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product41_mul_temp;  // sfix40_En22
  wire signed [36:0] Product4_Im;  // sfix37_En22
  reg signed [36:0] Product4_Im_1;  // sfix37_En22
  reg signed [36:0] Product5_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product5_mul_temp;  // sfix40_En22
  wire signed [36:0] Product5_Re;  // sfix37_En22
  reg signed [36:0] Product5_Re_1;  // sfix37_En22
  reg signed [36:0] Product5_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product51_mul_temp;  // sfix40_En22
  wire signed [36:0] Product5_Im;  // sfix37_En22
  reg signed [36:0] Product5_Im_1;  // sfix37_En22
  reg signed [36:0] Product6_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product6_mul_temp;  // sfix40_En22
  wire signed [36:0] Product6_Re;  // sfix37_En22
  reg signed [36:0] Product6_Re_1;  // sfix37_En22
  reg signed [36:0] Product6_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product61_mul_temp;  // sfix40_En22
  wire signed [36:0] Product6_Im;  // sfix37_En22
  reg signed [36:0] Product6_Im_1;  // sfix37_En22
  reg signed [36:0] Product7_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product7_mul_temp;  // sfix40_En22
  wire signed [36:0] Product7_Re;  // sfix37_En22
  reg signed [36:0] Product7_Re_1;  // sfix37_En22
  reg signed [36:0] Product7_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product71_mul_temp;  // sfix40_En22
  wire signed [36:0] Product7_Im;  // sfix37_En22
  reg signed [36:0] Product7_Im_1;  // sfix37_En22
  reg signed [36:0] Product8_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product8_mul_temp;  // sfix40_En22
  wire signed [36:0] Product8_Re;  // sfix37_En22
  reg signed [36:0] Product8_Re_1;  // sfix37_En22
  reg signed [36:0] Product8_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product81_mul_temp;  // sfix40_En22
  wire signed [36:0] Product8_Im;  // sfix37_En22
  reg signed [36:0] Product8_Im_1;  // sfix37_En22
  reg signed [36:0] Product9_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product9_mul_temp;  // sfix40_En22
  wire signed [36:0] Product9_Re;  // sfix37_En22
  reg signed [36:0] Product9_Re_1;  // sfix37_En22
  reg signed [36:0] Product9_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product91_mul_temp;  // sfix40_En22
  wire signed [36:0] Product9_Im;  // sfix37_En22
  reg signed [36:0] Product9_Im_1;  // sfix37_En22
  reg signed [36:0] Product10_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product10_mul_temp;  // sfix40_En22
  wire signed [36:0] Product10_Re;  // sfix37_En22
  reg signed [36:0] Product10_Re_1;  // sfix37_En22
  reg signed [36:0] Product10_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product101_mul_temp;  // sfix40_En22
  wire signed [36:0] Product10_Im;  // sfix37_En22
  reg signed [36:0] Product10_Im_1;  // sfix37_En22
  reg signed [36:0] Product11_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product111_mul_temp;  // sfix40_En22
  wire signed [36:0] Product11_Re;  // sfix37_En22
  reg signed [36:0] Product11_Re_1;  // sfix37_En22
  reg signed [36:0] Product11_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product112_mul_temp;  // sfix40_En22
  wire signed [36:0] Product11_Im;  // sfix37_En22
  reg signed [36:0] Product11_Im_1;  // sfix37_En22
  reg signed [36:0] Product12_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product12_mul_temp;  // sfix40_En22
  wire signed [36:0] Product12_Re;  // sfix37_En22
  reg signed [36:0] Product12_Re_1;  // sfix37_En22
  reg signed [36:0] Product12_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product121_mul_temp;  // sfix40_En22
  wire signed [36:0] Product12_Im;  // sfix37_En22
  reg signed [36:0] Product12_Im_1;  // sfix37_En22
  reg signed [36:0] Product13_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product13_mul_temp;  // sfix40_En22
  wire signed [36:0] Product13_Re;  // sfix37_En22
  reg signed [36:0] Product13_Re_1;  // sfix37_En22
  reg signed [36:0] Product13_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product131_mul_temp;  // sfix40_En22
  wire signed [36:0] Product13_Im;  // sfix37_En22
  reg signed [36:0] Product13_Im_1;  // sfix37_En22
  reg signed [36:0] Product14_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product14_mul_temp;  // sfix40_En22
  wire signed [36:0] Product14_Re;  // sfix37_En22
  reg signed [36:0] Product14_Re_1;  // sfix37_En22
  reg signed [36:0] Product14_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product141_mul_temp;  // sfix40_En22
  wire signed [36:0] Product14_Im;  // sfix37_En22
  reg signed [36:0] Product14_Im_1;  // sfix37_En22
  reg signed [36:0] Product15_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product15_mul_temp;  // sfix40_En22
  wire signed [36:0] Product15_Re;  // sfix37_En22
  reg signed [36:0] Product15_Re_1;  // sfix37_En22
  reg signed [36:0] Product15_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product151_mul_temp;  // sfix40_En22
  wire signed [36:0] Product15_Im;  // sfix37_En22
  reg signed [36:0] Product15_Im_1;  // sfix37_En22
  reg signed [36:0] Product16_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product16_mul_temp;  // sfix40_En22
  wire signed [36:0] Product16_Re;  // sfix37_En22
  reg signed [36:0] Product16_Re_1;  // sfix37_En22
  reg signed [36:0] Product16_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product161_mul_temp;  // sfix40_En22
  wire signed [36:0] Product16_Im;  // sfix37_En22
  reg signed [36:0] Product16_Im_1;  // sfix37_En22
  reg signed [36:0] Product17_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product17_mul_temp;  // sfix40_En22
  wire signed [36:0] Product17_Re;  // sfix37_En22
  reg signed [36:0] Product17_Re_1;  // sfix37_En22
  reg signed [36:0] Product17_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product171_mul_temp;  // sfix40_En22
  wire signed [36:0] Product17_Im;  // sfix37_En22
  reg signed [36:0] Product17_Im_1;  // sfix37_En22
  reg signed [36:0] Product18_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product18_mul_temp;  // sfix40_En22
  wire signed [36:0] Product18_Re;  // sfix37_En22
  reg signed [36:0] Product18_Re_1;  // sfix37_En22
  reg signed [36:0] Product18_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product181_mul_temp;  // sfix40_En22
  wire signed [36:0] Product18_Im;  // sfix37_En22
  reg signed [36:0] Product18_Im_1;  // sfix37_En22
  reg signed [36:0] Product19_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product19_mul_temp;  // sfix40_En22
  wire signed [36:0] Product19_Re;  // sfix37_En22
  reg signed [36:0] Product19_Re_1;  // sfix37_En22
  reg signed [36:0] Product19_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product191_mul_temp;  // sfix40_En22
  wire signed [36:0] Product19_Im;  // sfix37_En22
  reg signed [36:0] Product19_Im_1;  // sfix37_En22
  reg signed [36:0] Product20_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product20_mul_temp;  // sfix40_En22
  wire signed [36:0] Product20_Re;  // sfix37_En22
  reg signed [36:0] Product20_Re_1;  // sfix37_En22
  reg signed [36:0] Product20_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product201_mul_temp;  // sfix40_En22
  wire signed [36:0] Product20_Im;  // sfix37_En22
  reg signed [36:0] Product20_Im_1;  // sfix37_En22
  reg signed [36:0] Product21_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product211_mul_temp;  // sfix40_En22
  wire signed [36:0] Product21_Re;  // sfix37_En22
  reg signed [36:0] Product21_Re_1;  // sfix37_En22
  reg signed [36:0] Product21_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product212_mul_temp;  // sfix40_En22
  wire signed [36:0] Product21_Im;  // sfix37_En22
  reg signed [36:0] Product21_Im_1;  // sfix37_En22
  reg signed [36:0] Product22_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product22_mul_temp;  // sfix40_En22
  wire signed [36:0] Product22_Re;  // sfix37_En22
  reg signed [36:0] Product22_Re_1;  // sfix37_En22
  reg signed [36:0] Product22_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product221_mul_temp;  // sfix40_En22
  wire signed [36:0] Product22_Im;  // sfix37_En22
  reg signed [36:0] Product22_Im_1;  // sfix37_En22
  reg signed [36:0] Product23_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product23_mul_temp;  // sfix40_En22
  wire signed [36:0] Product23_Re;  // sfix37_En22
  reg signed [36:0] Product23_Re_1;  // sfix37_En22
  reg signed [36:0] Product23_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product231_mul_temp;  // sfix40_En22
  wire signed [36:0] Product23_Im;  // sfix37_En22
  reg signed [36:0] Product23_Im_1;  // sfix37_En22
  reg signed [36:0] Product24_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product24_mul_temp;  // sfix40_En22
  wire signed [36:0] Product24_Re;  // sfix37_En22
  reg signed [36:0] Product24_Re_1;  // sfix37_En22
  reg signed [36:0] Product24_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product241_mul_temp;  // sfix40_En22
  wire signed [36:0] Product24_Im;  // sfix37_En22
  reg signed [36:0] Product24_Im_1;  // sfix37_En22
  reg signed [36:0] Product25_C2ReIm_C2ReIm_A;  // sfix37_En22
  wire signed [39:0] Product25_mul_temp;  // sfix40_En22
  wire signed [36:0] Product25_Re;  // sfix37_En22
  reg signed [36:0] Product25_Re_1;  // sfix37_En22
  reg signed [36:0] Product25_C2ReIm_C2ReIm_B;  // sfix37_En22
  wire signed [39:0] Product251_mul_temp;  // sfix40_En22
  wire signed [36:0] Product25_Im;  // sfix37_En22
  reg signed [36:0] Product25_Im_1;  // sfix37_En22
  wire Constant2_out1;  // ufix1


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset_x == 1'b1) begin
        Product1_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product1_C2ReIm_C2ReIm_A <= X_0_re;
        end
      end
    end



  assign Constant1_out1 = 3'sb010;



  always @(posedge clk)
    begin : reduced_process
      if (reset_x == 1'b1) begin
        Constant1_out1_1 <= 3'sb000;
      end
      else begin
        if (enb) begin
          Constant1_out1_1 <= Constant1_out1;
        end
      end
    end



  assign Product1_mul_temp = Product1_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product1_Re = Product1_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset_x == 1'b1) begin
        Product1_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product1_Re_1 <= Product1_Re;
        end
      end
    end



  assign Xc_0_re = Product1_Re_1;

  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset_x == 1'b1) begin
        Product1_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product1_C2ReIm_C2ReIm_B <= X_0_im;
        end
      end
    end



  assign Product11_mul_temp = Product1_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product1_Im = Product11_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset_x == 1'b1) begin
        Product1_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product1_Im_1 <= Product1_Im;
        end
      end
    end



  assign Xc_0_im = Product1_Im_1;

  always @(posedge clk)
    begin : HwModeRegister44_process
      if (reset_x == 1'b1) begin
        Product2_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product2_C2ReIm_C2ReIm_A <= X_1_re;
        end
      end
    end



  assign Product2_mul_temp = Product2_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product2_Re = Product2_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister22_process
      if (reset_x == 1'b1) begin
        Product2_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product2_Re_1 <= Product2_Re;
        end
      end
    end



  assign Xc_1_re = Product2_Re_1;

  always @(posedge clk)
    begin : HwModeRegister46_process
      if (reset_x == 1'b1) begin
        Product2_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product2_C2ReIm_C2ReIm_B <= X_1_im;
        end
      end
    end



  assign Product21_mul_temp = Product2_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product2_Im = Product21_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister23_process
      if (reset_x == 1'b1) begin
        Product2_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product2_Im_1 <= Product2_Im;
        end
      end
    end



  assign Xc_1_im = Product2_Im_1;

  always @(posedge clk)
    begin : HwModeRegister72_process
      if (reset_x == 1'b1) begin
        Product3_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product3_C2ReIm_C2ReIm_A <= X_2_re;
        end
      end
    end



  assign Product3_mul_temp = Product3_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product3_Re = Product3_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister36_process
      if (reset_x == 1'b1) begin
        Product3_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product3_Re_1 <= Product3_Re;
        end
      end
    end



  assign Xc_2_re = Product3_Re_1;

  always @(posedge clk)
    begin : HwModeRegister74_process
      if (reset_x == 1'b1) begin
        Product3_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product3_C2ReIm_C2ReIm_B <= X_2_im;
        end
      end
    end



  assign Product31_mul_temp = Product3_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product3_Im = Product31_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister37_process
      if (reset_x == 1'b1) begin
        Product3_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product3_Im_1 <= Product3_Im;
        end
      end
    end



  assign Xc_2_im = Product3_Im_1;

  always @(posedge clk)
    begin : HwModeRegister76_process
      if (reset_x == 1'b1) begin
        Product4_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product4_C2ReIm_C2ReIm_A <= X_3_re;
        end
      end
    end



  assign Product4_mul_temp = Product4_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product4_Re = Product4_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister38_process
      if (reset_x == 1'b1) begin
        Product4_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product4_Re_1 <= Product4_Re;
        end
      end
    end



  assign Xc_3_re = Product4_Re_1;

  always @(posedge clk)
    begin : HwModeRegister78_process
      if (reset_x == 1'b1) begin
        Product4_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product4_C2ReIm_C2ReIm_B <= X_3_im;
        end
      end
    end



  assign Product41_mul_temp = Product4_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product4_Im = Product41_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister39_process
      if (reset_x == 1'b1) begin
        Product4_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product4_Im_1 <= Product4_Im;
        end
      end
    end



  assign Xc_3_im = Product4_Im_1;

  always @(posedge clk)
    begin : HwModeRegister80_process
      if (reset_x == 1'b1) begin
        Product5_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product5_C2ReIm_C2ReIm_A <= X_4_re;
        end
      end
    end



  assign Product5_mul_temp = Product5_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product5_Re = Product5_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister40_process
      if (reset_x == 1'b1) begin
        Product5_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product5_Re_1 <= Product5_Re;
        end
      end
    end



  assign Xc_4_re = Product5_Re_1;

  always @(posedge clk)
    begin : HwModeRegister82_process
      if (reset_x == 1'b1) begin
        Product5_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product5_C2ReIm_C2ReIm_B <= X_4_im;
        end
      end
    end



  assign Product51_mul_temp = Product5_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product5_Im = Product51_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister41_process
      if (reset_x == 1'b1) begin
        Product5_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product5_Im_1 <= Product5_Im;
        end
      end
    end



  assign Xc_4_im = Product5_Im_1;

  always @(posedge clk)
    begin : HwModeRegister84_process
      if (reset_x == 1'b1) begin
        Product6_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product6_C2ReIm_C2ReIm_A <= X_5_re;
        end
      end
    end



  assign Product6_mul_temp = Product6_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product6_Re = Product6_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister42_process
      if (reset_x == 1'b1) begin
        Product6_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product6_Re_1 <= Product6_Re;
        end
      end
    end



  assign Xc_5_re = Product6_Re_1;

  always @(posedge clk)
    begin : HwModeRegister86_process
      if (reset_x == 1'b1) begin
        Product6_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product6_C2ReIm_C2ReIm_B <= X_5_im;
        end
      end
    end



  assign Product61_mul_temp = Product6_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product6_Im = Product61_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister43_process
      if (reset_x == 1'b1) begin
        Product6_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product6_Im_1 <= Product6_Im;
        end
      end
    end



  assign Xc_5_im = Product6_Im_1;

  always @(posedge clk)
    begin : HwModeRegister88_process
      if (reset_x == 1'b1) begin
        Product7_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product7_C2ReIm_C2ReIm_A <= X_6_re;
        end
      end
    end



  assign Product7_mul_temp = Product7_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product7_Re = Product7_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister44_process
      if (reset_x == 1'b1) begin
        Product7_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product7_Re_1 <= Product7_Re;
        end
      end
    end



  assign Xc_6_re = Product7_Re_1;

  always @(posedge clk)
    begin : HwModeRegister90_process
      if (reset_x == 1'b1) begin
        Product7_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product7_C2ReIm_C2ReIm_B <= X_6_im;
        end
      end
    end



  assign Product71_mul_temp = Product7_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product7_Im = Product71_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister45_process
      if (reset_x == 1'b1) begin
        Product7_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product7_Im_1 <= Product7_Im;
        end
      end
    end



  assign Xc_6_im = Product7_Im_1;

  always @(posedge clk)
    begin : HwModeRegister92_process
      if (reset_x == 1'b1) begin
        Product8_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product8_C2ReIm_C2ReIm_A <= X_7_re;
        end
      end
    end



  assign Product8_mul_temp = Product8_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product8_Re = Product8_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister46_process
      if (reset_x == 1'b1) begin
        Product8_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product8_Re_1 <= Product8_Re;
        end
      end
    end



  assign Xc_7_re = Product8_Re_1;

  always @(posedge clk)
    begin : HwModeRegister94_process
      if (reset_x == 1'b1) begin
        Product8_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product8_C2ReIm_C2ReIm_B <= X_7_im;
        end
      end
    end



  assign Product81_mul_temp = Product8_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product8_Im = Product81_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister47_process
      if (reset_x == 1'b1) begin
        Product8_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product8_Im_1 <= Product8_Im;
        end
      end
    end



  assign Xc_7_im = Product8_Im_1;

  always @(posedge clk)
    begin : HwModeRegister96_process
      if (reset_x == 1'b1) begin
        Product9_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product9_C2ReIm_C2ReIm_A <= X_8_re;
        end
      end
    end



  assign Product9_mul_temp = Product9_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product9_Re = Product9_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister48_process
      if (reset_x == 1'b1) begin
        Product9_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product9_Re_1 <= Product9_Re;
        end
      end
    end



  assign Xc_8_re = Product9_Re_1;

  always @(posedge clk)
    begin : HwModeRegister98_process
      if (reset_x == 1'b1) begin
        Product9_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product9_C2ReIm_C2ReIm_B <= X_8_im;
        end
      end
    end



  assign Product91_mul_temp = Product9_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product9_Im = Product91_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister49_process
      if (reset_x == 1'b1) begin
        Product9_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product9_Im_1 <= Product9_Im;
        end
      end
    end



  assign Xc_8_im = Product9_Im_1;

  always @(posedge clk)
    begin : HwModeRegister4_process
      if (reset_x == 1'b1) begin
        Product10_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product10_C2ReIm_C2ReIm_A <= X_9_re;
        end
      end
    end



  assign Product10_mul_temp = Product10_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product10_Re = Product10_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister2_process
      if (reset_x == 1'b1) begin
        Product10_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product10_Re_1 <= Product10_Re;
        end
      end
    end



  assign Xc_9_re = Product10_Re_1;

  always @(posedge clk)
    begin : HwModeRegister6_process
      if (reset_x == 1'b1) begin
        Product10_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product10_C2ReIm_C2ReIm_B <= X_9_im;
        end
      end
    end



  assign Product101_mul_temp = Product10_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product10_Im = Product101_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister3_process
      if (reset_x == 1'b1) begin
        Product10_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product10_Im_1 <= Product10_Im;
        end
      end
    end



  assign Xc_9_im = Product10_Im_1;

  always @(posedge clk)
    begin : HwModeRegister8_process
      if (reset_x == 1'b1) begin
        Product11_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product11_C2ReIm_C2ReIm_A <= X_10_re;
        end
      end
    end



  assign Product111_mul_temp = Product11_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product11_Re = Product111_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister4_process
      if (reset_x == 1'b1) begin
        Product11_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product11_Re_1 <= Product11_Re;
        end
      end
    end



  assign Xc_10_re = Product11_Re_1;

  always @(posedge clk)
    begin : HwModeRegister10_process
      if (reset_x == 1'b1) begin
        Product11_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product11_C2ReIm_C2ReIm_B <= X_10_im;
        end
      end
    end



  assign Product112_mul_temp = Product11_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product11_Im = Product112_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister5_process
      if (reset_x == 1'b1) begin
        Product11_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product11_Im_1 <= Product11_Im;
        end
      end
    end



  assign Xc_10_im = Product11_Im_1;

  always @(posedge clk)
    begin : HwModeRegister12_process
      if (reset_x == 1'b1) begin
        Product12_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product12_C2ReIm_C2ReIm_A <= X_11_re;
        end
      end
    end



  assign Product12_mul_temp = Product12_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product12_Re = Product12_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister6_process
      if (reset_x == 1'b1) begin
        Product12_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product12_Re_1 <= Product12_Re;
        end
      end
    end



  assign Xc_11_re = Product12_Re_1;

  always @(posedge clk)
    begin : HwModeRegister14_process
      if (reset_x == 1'b1) begin
        Product12_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product12_C2ReIm_C2ReIm_B <= X_11_im;
        end
      end
    end



  assign Product121_mul_temp = Product12_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product12_Im = Product121_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister7_process
      if (reset_x == 1'b1) begin
        Product12_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product12_Im_1 <= Product12_Im;
        end
      end
    end



  assign Xc_11_im = Product12_Im_1;

  always @(posedge clk)
    begin : HwModeRegister16_process
      if (reset_x == 1'b1) begin
        Product13_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product13_C2ReIm_C2ReIm_A <= X_12_re;
        end
      end
    end



  assign Product13_mul_temp = Product13_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product13_Re = Product13_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister8_process
      if (reset_x == 1'b1) begin
        Product13_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product13_Re_1 <= Product13_Re;
        end
      end
    end



  assign Xc_12_re = Product13_Re_1;

  always @(posedge clk)
    begin : HwModeRegister18_process
      if (reset_x == 1'b1) begin
        Product13_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product13_C2ReIm_C2ReIm_B <= X_12_im;
        end
      end
    end



  assign Product131_mul_temp = Product13_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product13_Im = Product131_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister9_process
      if (reset_x == 1'b1) begin
        Product13_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product13_Im_1 <= Product13_Im;
        end
      end
    end



  assign Xc_12_im = Product13_Im_1;

  always @(posedge clk)
    begin : HwModeRegister20_process
      if (reset_x == 1'b1) begin
        Product14_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product14_C2ReIm_C2ReIm_A <= X_13_re;
        end
      end
    end



  assign Product14_mul_temp = Product14_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product14_Re = Product14_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister10_process
      if (reset_x == 1'b1) begin
        Product14_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product14_Re_1 <= Product14_Re;
        end
      end
    end



  assign Xc_13_re = Product14_Re_1;

  always @(posedge clk)
    begin : HwModeRegister22_process
      if (reset_x == 1'b1) begin
        Product14_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product14_C2ReIm_C2ReIm_B <= X_13_im;
        end
      end
    end



  assign Product141_mul_temp = Product14_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product14_Im = Product141_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister11_process
      if (reset_x == 1'b1) begin
        Product14_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product14_Im_1 <= Product14_Im;
        end
      end
    end



  assign Xc_13_im = Product14_Im_1;

  always @(posedge clk)
    begin : HwModeRegister24_process
      if (reset_x == 1'b1) begin
        Product15_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product15_C2ReIm_C2ReIm_A <= X_14_re;
        end
      end
    end



  assign Product15_mul_temp = Product15_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product15_Re = Product15_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister12_process
      if (reset_x == 1'b1) begin
        Product15_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product15_Re_1 <= Product15_Re;
        end
      end
    end



  assign Xc_14_re = Product15_Re_1;

  always @(posedge clk)
    begin : HwModeRegister26_process
      if (reset_x == 1'b1) begin
        Product15_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product15_C2ReIm_C2ReIm_B <= X_14_im;
        end
      end
    end



  assign Product151_mul_temp = Product15_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product15_Im = Product151_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister13_process
      if (reset_x == 1'b1) begin
        Product15_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product15_Im_1 <= Product15_Im;
        end
      end
    end



  assign Xc_14_im = Product15_Im_1;

  always @(posedge clk)
    begin : HwModeRegister28_process
      if (reset_x == 1'b1) begin
        Product16_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product16_C2ReIm_C2ReIm_A <= X_15_re;
        end
      end
    end



  assign Product16_mul_temp = Product16_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product16_Re = Product16_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister14_process
      if (reset_x == 1'b1) begin
        Product16_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product16_Re_1 <= Product16_Re;
        end
      end
    end



  assign Xc_15_re = Product16_Re_1;

  always @(posedge clk)
    begin : HwModeRegister30_process
      if (reset_x == 1'b1) begin
        Product16_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product16_C2ReIm_C2ReIm_B <= X_15_im;
        end
      end
    end



  assign Product161_mul_temp = Product16_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product16_Im = Product161_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister15_process
      if (reset_x == 1'b1) begin
        Product16_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product16_Im_1 <= Product16_Im;
        end
      end
    end



  assign Xc_15_im = Product16_Im_1;

  always @(posedge clk)
    begin : HwModeRegister32_process
      if (reset_x == 1'b1) begin
        Product17_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product17_C2ReIm_C2ReIm_A <= X_16_re;
        end
      end
    end



  assign Product17_mul_temp = Product17_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product17_Re = Product17_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister16_process
      if (reset_x == 1'b1) begin
        Product17_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product17_Re_1 <= Product17_Re;
        end
      end
    end



  assign Xc_16_re = Product17_Re_1;

  always @(posedge clk)
    begin : HwModeRegister34_process
      if (reset_x == 1'b1) begin
        Product17_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product17_C2ReIm_C2ReIm_B <= X_16_im;
        end
      end
    end



  assign Product171_mul_temp = Product17_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product17_Im = Product171_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister17_process
      if (reset_x == 1'b1) begin
        Product17_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product17_Im_1 <= Product17_Im;
        end
      end
    end



  assign Xc_16_im = Product17_Im_1;

  always @(posedge clk)
    begin : HwModeRegister36_process
      if (reset_x == 1'b1) begin
        Product18_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product18_C2ReIm_C2ReIm_A <= X_17_re;
        end
      end
    end



  assign Product18_mul_temp = Product18_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product18_Re = Product18_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister18_process
      if (reset_x == 1'b1) begin
        Product18_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product18_Re_1 <= Product18_Re;
        end
      end
    end



  assign Xc_17_re = Product18_Re_1;

  always @(posedge clk)
    begin : HwModeRegister38_process
      if (reset_x == 1'b1) begin
        Product18_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product18_C2ReIm_C2ReIm_B <= X_17_im;
        end
      end
    end



  assign Product181_mul_temp = Product18_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product18_Im = Product181_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister19_process
      if (reset_x == 1'b1) begin
        Product18_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product18_Im_1 <= Product18_Im;
        end
      end
    end



  assign Xc_17_im = Product18_Im_1;

  always @(posedge clk)
    begin : HwModeRegister40_process
      if (reset_x == 1'b1) begin
        Product19_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product19_C2ReIm_C2ReIm_A <= X_18_re;
        end
      end
    end



  assign Product19_mul_temp = Product19_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product19_Re = Product19_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister20_process
      if (reset_x == 1'b1) begin
        Product19_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product19_Re_1 <= Product19_Re;
        end
      end
    end



  assign Xc_18_re = Product19_Re_1;

  always @(posedge clk)
    begin : HwModeRegister42_process
      if (reset_x == 1'b1) begin
        Product19_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product19_C2ReIm_C2ReIm_B <= X_18_im;
        end
      end
    end



  assign Product191_mul_temp = Product19_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product19_Im = Product191_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister21_process
      if (reset_x == 1'b1) begin
        Product19_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product19_Im_1 <= Product19_Im;
        end
      end
    end



  assign Xc_18_im = Product19_Im_1;

  always @(posedge clk)
    begin : HwModeRegister48_process
      if (reset_x == 1'b1) begin
        Product20_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product20_C2ReIm_C2ReIm_A <= X_19_re;
        end
      end
    end



  assign Product20_mul_temp = Product20_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product20_Re = Product20_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister24_process
      if (reset_x == 1'b1) begin
        Product20_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product20_Re_1 <= Product20_Re;
        end
      end
    end



  assign Xc_19_re = Product20_Re_1;

  always @(posedge clk)
    begin : HwModeRegister50_process
      if (reset_x == 1'b1) begin
        Product20_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product20_C2ReIm_C2ReIm_B <= X_19_im;
        end
      end
    end



  assign Product201_mul_temp = Product20_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product20_Im = Product201_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister25_process
      if (reset_x == 1'b1) begin
        Product20_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product20_Im_1 <= Product20_Im;
        end
      end
    end



  assign Xc_19_im = Product20_Im_1;

  always @(posedge clk)
    begin : HwModeRegister52_process
      if (reset_x == 1'b1) begin
        Product21_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product21_C2ReIm_C2ReIm_A <= X_20_re;
        end
      end
    end



  assign Product211_mul_temp = Product21_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product21_Re = Product211_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister26_process
      if (reset_x == 1'b1) begin
        Product21_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product21_Re_1 <= Product21_Re;
        end
      end
    end



  assign Xc_20_re = Product21_Re_1;

  always @(posedge clk)
    begin : HwModeRegister54_process
      if (reset_x == 1'b1) begin
        Product21_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product21_C2ReIm_C2ReIm_B <= X_20_im;
        end
      end
    end



  assign Product212_mul_temp = Product21_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product21_Im = Product212_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister27_process
      if (reset_x == 1'b1) begin
        Product21_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product21_Im_1 <= Product21_Im;
        end
      end
    end



  assign Xc_20_im = Product21_Im_1;

  always @(posedge clk)
    begin : HwModeRegister56_process
      if (reset_x == 1'b1) begin
        Product22_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product22_C2ReIm_C2ReIm_A <= X_21_re;
        end
      end
    end



  assign Product22_mul_temp = Product22_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product22_Re = Product22_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister28_process
      if (reset_x == 1'b1) begin
        Product22_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product22_Re_1 <= Product22_Re;
        end
      end
    end



  assign Xc_21_re = Product22_Re_1;

  always @(posedge clk)
    begin : HwModeRegister58_process
      if (reset_x == 1'b1) begin
        Product22_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product22_C2ReIm_C2ReIm_B <= X_21_im;
        end
      end
    end



  assign Product221_mul_temp = Product22_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product22_Im = Product221_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister29_process
      if (reset_x == 1'b1) begin
        Product22_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product22_Im_1 <= Product22_Im;
        end
      end
    end



  assign Xc_21_im = Product22_Im_1;

  always @(posedge clk)
    begin : HwModeRegister60_process
      if (reset_x == 1'b1) begin
        Product23_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product23_C2ReIm_C2ReIm_A <= X_22_re;
        end
      end
    end



  assign Product23_mul_temp = Product23_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product23_Re = Product23_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister30_process
      if (reset_x == 1'b1) begin
        Product23_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product23_Re_1 <= Product23_Re;
        end
      end
    end



  assign Xc_22_re = Product23_Re_1;

  always @(posedge clk)
    begin : HwModeRegister62_process
      if (reset_x == 1'b1) begin
        Product23_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product23_C2ReIm_C2ReIm_B <= X_22_im;
        end
      end
    end



  assign Product231_mul_temp = Product23_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product23_Im = Product231_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister31_process
      if (reset_x == 1'b1) begin
        Product23_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product23_Im_1 <= Product23_Im;
        end
      end
    end



  assign Xc_22_im = Product23_Im_1;

  always @(posedge clk)
    begin : HwModeRegister64_process
      if (reset_x == 1'b1) begin
        Product24_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product24_C2ReIm_C2ReIm_A <= X_23_re;
        end
      end
    end



  assign Product24_mul_temp = Product24_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product24_Re = Product24_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister32_process
      if (reset_x == 1'b1) begin
        Product24_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product24_Re_1 <= Product24_Re;
        end
      end
    end



  assign Xc_23_re = Product24_Re_1;

  always @(posedge clk)
    begin : HwModeRegister66_process
      if (reset_x == 1'b1) begin
        Product24_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product24_C2ReIm_C2ReIm_B <= X_23_im;
        end
      end
    end



  assign Product241_mul_temp = Product24_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product24_Im = Product241_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister33_process
      if (reset_x == 1'b1) begin
        Product24_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product24_Im_1 <= Product24_Im;
        end
      end
    end



  assign Xc_23_im = Product24_Im_1;

  always @(posedge clk)
    begin : HwModeRegister68_process
      if (reset_x == 1'b1) begin
        Product25_C2ReIm_C2ReIm_A <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product25_C2ReIm_C2ReIm_A <= X_24_re;
        end
      end
    end



  assign Product25_mul_temp = Product25_C2ReIm_C2ReIm_A * Constant1_out1_1;
  assign Product25_Re = Product25_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister34_process
      if (reset_x == 1'b1) begin
        Product25_Re_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product25_Re_1 <= Product25_Re;
        end
      end
    end



  assign Xc_24_re = Product25_Re_1;

  always @(posedge clk)
    begin : HwModeRegister70_process
      if (reset_x == 1'b1) begin
        Product25_C2ReIm_C2ReIm_B <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product25_C2ReIm_C2ReIm_B <= X_24_im;
        end
      end
    end



  assign Product251_mul_temp = Product25_C2ReIm_C2ReIm_B * Constant1_out1_1;
  assign Product25_Im = Product251_mul_temp[36:0];



  always @(posedge clk)
    begin : PipelineRegister35_process
      if (reset_x == 1'b1) begin
        Product25_Im_1 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Product25_Im_1 <= Product25_Im;
        end
      end
    end



  assign Xc_24_im = Product25_Im_1;

  assign Constant2_out1 = 1'b0;



  assign Xc_0_1 = Constant2_out1;

endmodule  // generating_analytical_spectrum

