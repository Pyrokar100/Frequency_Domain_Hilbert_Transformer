// -------------------------------------------------------------
// 
// File Name: C:\Users\Carlos Cajas\Desktop\henkindama2\newhope_cambios\parallel_serial.v
// Created: 2020-12-20 13:10:05
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: parallel_serial
// Source Path: newhope_cambios/FDHT/parallel_serial
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module parallel_serial
          (clk,
           reset_x,
           enb,
           In1,
           In2,
           In3,
           In4,
           In5,
           In6,
           In7,
           In8,
           In9,
           In10,
           In11,
           In12,
           In13,
           In14,
           In15,
           In16,
           In17,
           In18,
           In19,
           In20,
           In21,
           In22,
           In23,
           In24,
           In25,
           In26,
           In27,
           In28,
           In29,
           In30,
           In31,
           In32,
           In33,
           In34,
           In35,
           In36,
           In37,
           In38,
           In39,
           In40,
           In41,
           In42,
           In43,
           In44,
           In45,
           In46,
           In47,
           In48,
           In49,
           In50,
           In51,
           Out2);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [14:0] In1;  // sfix15_En5
  input   signed [14:0] In2;  // sfix15_En5
  input   signed [14:0] In3;  // sfix15_En5
  input   signed [14:0] In4;  // sfix15_En5
  input   signed [14:0] In5;  // sfix15_En5
  input   signed [14:0] In6;  // sfix15_En5
  input   signed [14:0] In7;  // sfix15_En5
  input   signed [14:0] In8;  // sfix15_En5
  input   signed [14:0] In9;  // sfix15_En5
  input   signed [14:0] In10;  // sfix15_En5
  input   signed [14:0] In11;  // sfix15_En5
  input   signed [14:0] In12;  // sfix15_En5
  input   signed [14:0] In13;  // sfix15_En5
  input   signed [14:0] In14;  // sfix15_En5
  input   signed [14:0] In15;  // sfix15_En5
  input   signed [14:0] In16;  // sfix15_En5
  input   signed [14:0] In17;  // sfix15_En5
  input   signed [14:0] In18;  // sfix15_En5
  input   signed [14:0] In19;  // sfix15_En5
  input   signed [14:0] In20;  // sfix15_En5
  input   signed [14:0] In21;  // sfix15_En5
  input   signed [14:0] In22;  // sfix15_En5
  input   signed [14:0] In23;  // sfix15_En5
  input   signed [14:0] In24;  // sfix15_En5
  input   signed [14:0] In25;  // sfix15_En5
  input   signed [14:0] In26;  // sfix15_En5
  input   signed [14:0] In27;  // sfix15_En5
  input   signed [14:0] In28;  // sfix15_En5
  input   signed [14:0] In29;  // sfix15_En5
  input   signed [14:0] In30;  // sfix15_En5
  input   signed [14:0] In31;  // sfix15_En5
  input   signed [14:0] In32;  // sfix15_En5
  input   signed [14:0] In33;  // sfix15_En5
  input   signed [14:0] In34;  // sfix15_En5
  input   signed [14:0] In35;  // sfix15_En5
  input   signed [14:0] In36;  // sfix15_En5
  input   signed [14:0] In37;  // sfix15_En5
  input   signed [14:0] In38;  // sfix15_En5
  input   signed [14:0] In39;  // sfix15_En5
  input   signed [14:0] In40;  // sfix15_En5
  input   signed [14:0] In41;  // sfix15_En5
  input   signed [14:0] In42;  // sfix15_En5
  input   signed [14:0] In43;  // sfix15_En5
  input   signed [14:0] In44;  // sfix15_En5
  input   signed [14:0] In45;  // sfix15_En5
  input   signed [14:0] In46;  // sfix15_En5
  input   signed [14:0] In47;  // sfix15_En5
  input   signed [14:0] In48;  // sfix15_En5
  input   signed [14:0] In49;  // sfix15_En5
  input   signed [14:0] In50;  // sfix15_En5
  input   [7:0] In51;  // uint8
  output  signed [14:0] Out2;  // sfix15_En5


  reg [7:0] delayMatch_reg [0:25];  // ufix8 [26]
  wire [7:0] delayMatch_reg_next [0:25];  // ufix8 [26]
  wire [7:0] In51_1;  // uint8
  reg signed [14:0] delayMatch1_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch1_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In1_1;  // sfix15_En5
  reg signed [14:0] delayMatch2_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch2_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In7_1;  // sfix15_En5
  reg signed [14:0] delayMatch3_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch3_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In8_1;  // sfix15_En5
  reg signed [14:0] delayMatch4_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch4_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In9_1;  // sfix15_En5
  reg signed [14:0] delayMatch5_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch5_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In10_1;  // sfix15_En5
  reg signed [14:0] delayMatch6_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch6_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In11_1;  // sfix15_En5
  reg signed [14:0] delayMatch7_reg [0:3];  // sfix15 [4]
  wire signed [14:0] delayMatch7_reg_next [0:3];  // sfix15_En5 [4]
  wire signed [14:0] In17_1;  // sfix15_En5
  reg signed [14:0] delayMatch8_reg [0:3];  // sfix15 [4]
  wire signed [14:0] delayMatch8_reg_next [0:3];  // sfix15_En5 [4]
  wire signed [14:0] In18_1;  // sfix15_En5
  reg signed [14:0] delayMatch9_reg [0:3];  // sfix15 [4]
  wire signed [14:0] delayMatch9_reg_next [0:3];  // sfix15_En5 [4]
  wire signed [14:0] In19_1;  // sfix15_En5
  reg signed [14:0] delayMatch10_reg [0:3];  // sfix15 [4]
  wire signed [14:0] delayMatch10_reg_next [0:3];  // sfix15_En5 [4]
  wire signed [14:0] In20_1;  // sfix15_En5
  reg signed [14:0] delayMatch11_reg [0:3];  // sfix15 [4]
  wire signed [14:0] delayMatch11_reg_next [0:3];  // sfix15_En5 [4]
  wire signed [14:0] In21_1;  // sfix15_En5
  reg signed [14:0] delayMatch12_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch12_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In22_1;  // sfix15_En5
  reg signed [14:0] delayMatch13_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch13_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In23_1;  // sfix15_En5
  reg signed [14:0] delayMatch14_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch14_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In24_1;  // sfix15_En5
  reg signed [14:0] delayMatch15_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch15_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In25_1;  // sfix15_En5
  reg signed [14:0] delayMatch16_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch16_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In26_1;  // sfix15_En5
  reg signed [14:0] delayMatch17_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch17_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In27_1;  // sfix15_En5
  reg signed [14:0] delayMatch18_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch18_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In28_1;  // sfix15_En5
  reg signed [14:0] delayMatch19_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch19_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In29_1;  // sfix15_En5
  reg signed [14:0] delayMatch20_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch20_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In30_1;  // sfix15_En5
  reg signed [14:0] delayMatch21_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch21_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In31_1;  // sfix15_En5
  reg signed [14:0] delayMatch22_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch22_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In37_1;  // sfix15_En5
  reg signed [14:0] delayMatch23_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch23_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In38_1;  // sfix15_En5
  reg signed [14:0] delayMatch24_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch24_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In39_1;  // sfix15_En5
  reg signed [14:0] delayMatch25_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch25_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In40_1;  // sfix15_En5
  reg signed [14:0] delayMatch26_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch26_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In41_1;  // sfix15_En5
  reg signed [14:0] delayMatch27_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch27_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In47_1;  // sfix15_En5
  reg signed [14:0] delayMatch28_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch28_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In48_1;  // sfix15_En5
  reg signed [14:0] delayMatch29_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch29_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In49_1;  // sfix15_En5
  reg signed [14:0] delayMatch30_reg [0:1];  // sfix15 [2]
  wire signed [14:0] delayMatch30_reg_next [0:1];  // sfix15_En5 [2]
  wire signed [14:0] In50_1;  // sfix15_En5
  wire signed [14:0] Multiport_Switch2_out1;  // sfix15_En5


  always @(posedge clk)
    begin : delayMatch_process
      if (reset_x == 1'b1) begin
        delayMatch_reg[0] <= 8'b00000000;
        delayMatch_reg[1] <= 8'b00000000;
        delayMatch_reg[2] <= 8'b00000000;
        delayMatch_reg[3] <= 8'b00000000;
        delayMatch_reg[4] <= 8'b00000000;
        delayMatch_reg[5] <= 8'b00000000;
        delayMatch_reg[6] <= 8'b00000000;
        delayMatch_reg[7] <= 8'b00000000;
        delayMatch_reg[8] <= 8'b00000000;
        delayMatch_reg[9] <= 8'b00000000;
        delayMatch_reg[10] <= 8'b00000000;
        delayMatch_reg[11] <= 8'b00000000;
        delayMatch_reg[12] <= 8'b00000000;
        delayMatch_reg[13] <= 8'b00000000;
        delayMatch_reg[14] <= 8'b00000000;
        delayMatch_reg[15] <= 8'b00000000;
        delayMatch_reg[16] <= 8'b00000000;
        delayMatch_reg[17] <= 8'b00000000;
        delayMatch_reg[18] <= 8'b00000000;
        delayMatch_reg[19] <= 8'b00000000;
        delayMatch_reg[20] <= 8'b00000000;
        delayMatch_reg[21] <= 8'b00000000;
        delayMatch_reg[22] <= 8'b00000000;
        delayMatch_reg[23] <= 8'b00000000;
        delayMatch_reg[24] <= 8'b00000000;
        delayMatch_reg[25] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
          delayMatch_reg[3] <= delayMatch_reg_next[3];
          delayMatch_reg[4] <= delayMatch_reg_next[4];
          delayMatch_reg[5] <= delayMatch_reg_next[5];
          delayMatch_reg[6] <= delayMatch_reg_next[6];
          delayMatch_reg[7] <= delayMatch_reg_next[7];
          delayMatch_reg[8] <= delayMatch_reg_next[8];
          delayMatch_reg[9] <= delayMatch_reg_next[9];
          delayMatch_reg[10] <= delayMatch_reg_next[10];
          delayMatch_reg[11] <= delayMatch_reg_next[11];
          delayMatch_reg[12] <= delayMatch_reg_next[12];
          delayMatch_reg[13] <= delayMatch_reg_next[13];
          delayMatch_reg[14] <= delayMatch_reg_next[14];
          delayMatch_reg[15] <= delayMatch_reg_next[15];
          delayMatch_reg[16] <= delayMatch_reg_next[16];
          delayMatch_reg[17] <= delayMatch_reg_next[17];
          delayMatch_reg[18] <= delayMatch_reg_next[18];
          delayMatch_reg[19] <= delayMatch_reg_next[19];
          delayMatch_reg[20] <= delayMatch_reg_next[20];
          delayMatch_reg[21] <= delayMatch_reg_next[21];
          delayMatch_reg[22] <= delayMatch_reg_next[22];
          delayMatch_reg[23] <= delayMatch_reg_next[23];
          delayMatch_reg[24] <= delayMatch_reg_next[24];
          delayMatch_reg[25] <= delayMatch_reg_next[25];
        end
      end
    end

  assign In51_1 = delayMatch_reg[25];
  assign delayMatch_reg_next[0] = In51;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];
  assign delayMatch_reg_next[3] = delayMatch_reg[2];
  assign delayMatch_reg_next[4] = delayMatch_reg[3];
  assign delayMatch_reg_next[5] = delayMatch_reg[4];
  assign delayMatch_reg_next[6] = delayMatch_reg[5];
  assign delayMatch_reg_next[7] = delayMatch_reg[6];
  assign delayMatch_reg_next[8] = delayMatch_reg[7];
  assign delayMatch_reg_next[9] = delayMatch_reg[8];
  assign delayMatch_reg_next[10] = delayMatch_reg[9];
  assign delayMatch_reg_next[11] = delayMatch_reg[10];
  assign delayMatch_reg_next[12] = delayMatch_reg[11];
  assign delayMatch_reg_next[13] = delayMatch_reg[12];
  assign delayMatch_reg_next[14] = delayMatch_reg[13];
  assign delayMatch_reg_next[15] = delayMatch_reg[14];
  assign delayMatch_reg_next[16] = delayMatch_reg[15];
  assign delayMatch_reg_next[17] = delayMatch_reg[16];
  assign delayMatch_reg_next[18] = delayMatch_reg[17];
  assign delayMatch_reg_next[19] = delayMatch_reg[18];
  assign delayMatch_reg_next[20] = delayMatch_reg[19];
  assign delayMatch_reg_next[21] = delayMatch_reg[20];
  assign delayMatch_reg_next[22] = delayMatch_reg[21];
  assign delayMatch_reg_next[23] = delayMatch_reg[22];
  assign delayMatch_reg_next[24] = delayMatch_reg[23];
  assign delayMatch_reg_next[25] = delayMatch_reg[24];



  always @(posedge clk)
    begin : delayMatch1_process
      if (reset_x == 1'b1) begin
        delayMatch1_reg[0] <= 15'sb000000000000000;
        delayMatch1_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch1_reg[0] <= delayMatch1_reg_next[0];
          delayMatch1_reg[1] <= delayMatch1_reg_next[1];
        end
      end
    end

  assign In1_1 = delayMatch1_reg[1];
  assign delayMatch1_reg_next[0] = In1;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];



  always @(posedge clk)
    begin : delayMatch2_process
      if (reset_x == 1'b1) begin
        delayMatch2_reg[0] <= 15'sb000000000000000;
        delayMatch2_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch2_reg[0] <= delayMatch2_reg_next[0];
          delayMatch2_reg[1] <= delayMatch2_reg_next[1];
        end
      end
    end

  assign In7_1 = delayMatch2_reg[1];
  assign delayMatch2_reg_next[0] = In7;
  assign delayMatch2_reg_next[1] = delayMatch2_reg[0];



  always @(posedge clk)
    begin : delayMatch3_process
      if (reset_x == 1'b1) begin
        delayMatch3_reg[0] <= 15'sb000000000000000;
        delayMatch3_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch3_reg[0] <= delayMatch3_reg_next[0];
          delayMatch3_reg[1] <= delayMatch3_reg_next[1];
        end
      end
    end

  assign In8_1 = delayMatch3_reg[1];
  assign delayMatch3_reg_next[0] = In8;
  assign delayMatch3_reg_next[1] = delayMatch3_reg[0];



  always @(posedge clk)
    begin : delayMatch4_process
      if (reset_x == 1'b1) begin
        delayMatch4_reg[0] <= 15'sb000000000000000;
        delayMatch4_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch4_reg[0] <= delayMatch4_reg_next[0];
          delayMatch4_reg[1] <= delayMatch4_reg_next[1];
        end
      end
    end

  assign In9_1 = delayMatch4_reg[1];
  assign delayMatch4_reg_next[0] = In9;
  assign delayMatch4_reg_next[1] = delayMatch4_reg[0];



  always @(posedge clk)
    begin : delayMatch5_process
      if (reset_x == 1'b1) begin
        delayMatch5_reg[0] <= 15'sb000000000000000;
        delayMatch5_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch5_reg[0] <= delayMatch5_reg_next[0];
          delayMatch5_reg[1] <= delayMatch5_reg_next[1];
        end
      end
    end

  assign In10_1 = delayMatch5_reg[1];
  assign delayMatch5_reg_next[0] = In10;
  assign delayMatch5_reg_next[1] = delayMatch5_reg[0];



  always @(posedge clk)
    begin : delayMatch6_process
      if (reset_x == 1'b1) begin
        delayMatch6_reg[0] <= 15'sb000000000000000;
        delayMatch6_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch6_reg[0] <= delayMatch6_reg_next[0];
          delayMatch6_reg[1] <= delayMatch6_reg_next[1];
        end
      end
    end

  assign In11_1 = delayMatch6_reg[1];
  assign delayMatch6_reg_next[0] = In11;
  assign delayMatch6_reg_next[1] = delayMatch6_reg[0];



  always @(posedge clk)
    begin : delayMatch7_process
      if (reset_x == 1'b1) begin
        delayMatch7_reg[0] <= 15'sb000000000000000;
        delayMatch7_reg[1] <= 15'sb000000000000000;
        delayMatch7_reg[2] <= 15'sb000000000000000;
        delayMatch7_reg[3] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch7_reg[0] <= delayMatch7_reg_next[0];
          delayMatch7_reg[1] <= delayMatch7_reg_next[1];
          delayMatch7_reg[2] <= delayMatch7_reg_next[2];
          delayMatch7_reg[3] <= delayMatch7_reg_next[3];
        end
      end
    end

  assign In17_1 = delayMatch7_reg[3];
  assign delayMatch7_reg_next[0] = In17;
  assign delayMatch7_reg_next[1] = delayMatch7_reg[0];
  assign delayMatch7_reg_next[2] = delayMatch7_reg[1];
  assign delayMatch7_reg_next[3] = delayMatch7_reg[2];



  always @(posedge clk)
    begin : delayMatch8_process
      if (reset_x == 1'b1) begin
        delayMatch8_reg[0] <= 15'sb000000000000000;
        delayMatch8_reg[1] <= 15'sb000000000000000;
        delayMatch8_reg[2] <= 15'sb000000000000000;
        delayMatch8_reg[3] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch8_reg[0] <= delayMatch8_reg_next[0];
          delayMatch8_reg[1] <= delayMatch8_reg_next[1];
          delayMatch8_reg[2] <= delayMatch8_reg_next[2];
          delayMatch8_reg[3] <= delayMatch8_reg_next[3];
        end
      end
    end

  assign In18_1 = delayMatch8_reg[3];
  assign delayMatch8_reg_next[0] = In18;
  assign delayMatch8_reg_next[1] = delayMatch8_reg[0];
  assign delayMatch8_reg_next[2] = delayMatch8_reg[1];
  assign delayMatch8_reg_next[3] = delayMatch8_reg[2];



  always @(posedge clk)
    begin : delayMatch9_process
      if (reset_x == 1'b1) begin
        delayMatch9_reg[0] <= 15'sb000000000000000;
        delayMatch9_reg[1] <= 15'sb000000000000000;
        delayMatch9_reg[2] <= 15'sb000000000000000;
        delayMatch9_reg[3] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch9_reg[0] <= delayMatch9_reg_next[0];
          delayMatch9_reg[1] <= delayMatch9_reg_next[1];
          delayMatch9_reg[2] <= delayMatch9_reg_next[2];
          delayMatch9_reg[3] <= delayMatch9_reg_next[3];
        end
      end
    end

  assign In19_1 = delayMatch9_reg[3];
  assign delayMatch9_reg_next[0] = In19;
  assign delayMatch9_reg_next[1] = delayMatch9_reg[0];
  assign delayMatch9_reg_next[2] = delayMatch9_reg[1];
  assign delayMatch9_reg_next[3] = delayMatch9_reg[2];



  always @(posedge clk)
    begin : delayMatch10_process
      if (reset_x == 1'b1) begin
        delayMatch10_reg[0] <= 15'sb000000000000000;
        delayMatch10_reg[1] <= 15'sb000000000000000;
        delayMatch10_reg[2] <= 15'sb000000000000000;
        delayMatch10_reg[3] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch10_reg[0] <= delayMatch10_reg_next[0];
          delayMatch10_reg[1] <= delayMatch10_reg_next[1];
          delayMatch10_reg[2] <= delayMatch10_reg_next[2];
          delayMatch10_reg[3] <= delayMatch10_reg_next[3];
        end
      end
    end

  assign In20_1 = delayMatch10_reg[3];
  assign delayMatch10_reg_next[0] = In20;
  assign delayMatch10_reg_next[1] = delayMatch10_reg[0];
  assign delayMatch10_reg_next[2] = delayMatch10_reg[1];
  assign delayMatch10_reg_next[3] = delayMatch10_reg[2];



  always @(posedge clk)
    begin : delayMatch11_process
      if (reset_x == 1'b1) begin
        delayMatch11_reg[0] <= 15'sb000000000000000;
        delayMatch11_reg[1] <= 15'sb000000000000000;
        delayMatch11_reg[2] <= 15'sb000000000000000;
        delayMatch11_reg[3] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch11_reg[0] <= delayMatch11_reg_next[0];
          delayMatch11_reg[1] <= delayMatch11_reg_next[1];
          delayMatch11_reg[2] <= delayMatch11_reg_next[2];
          delayMatch11_reg[3] <= delayMatch11_reg_next[3];
        end
      end
    end

  assign In21_1 = delayMatch11_reg[3];
  assign delayMatch11_reg_next[0] = In21;
  assign delayMatch11_reg_next[1] = delayMatch11_reg[0];
  assign delayMatch11_reg_next[2] = delayMatch11_reg[1];
  assign delayMatch11_reg_next[3] = delayMatch11_reg[2];



  always @(posedge clk)
    begin : delayMatch12_process
      if (reset_x == 1'b1) begin
        delayMatch12_reg[0] <= 15'sb000000000000000;
        delayMatch12_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch12_reg[0] <= delayMatch12_reg_next[0];
          delayMatch12_reg[1] <= delayMatch12_reg_next[1];
        end
      end
    end

  assign In22_1 = delayMatch12_reg[1];
  assign delayMatch12_reg_next[0] = In22;
  assign delayMatch12_reg_next[1] = delayMatch12_reg[0];



  always @(posedge clk)
    begin : delayMatch13_process
      if (reset_x == 1'b1) begin
        delayMatch13_reg[0] <= 15'sb000000000000000;
        delayMatch13_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch13_reg[0] <= delayMatch13_reg_next[0];
          delayMatch13_reg[1] <= delayMatch13_reg_next[1];
        end
      end
    end

  assign In23_1 = delayMatch13_reg[1];
  assign delayMatch13_reg_next[0] = In23;
  assign delayMatch13_reg_next[1] = delayMatch13_reg[0];



  always @(posedge clk)
    begin : delayMatch14_process
      if (reset_x == 1'b1) begin
        delayMatch14_reg[0] <= 15'sb000000000000000;
        delayMatch14_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch14_reg[0] <= delayMatch14_reg_next[0];
          delayMatch14_reg[1] <= delayMatch14_reg_next[1];
        end
      end
    end

  assign In24_1 = delayMatch14_reg[1];
  assign delayMatch14_reg_next[0] = In24;
  assign delayMatch14_reg_next[1] = delayMatch14_reg[0];



  always @(posedge clk)
    begin : delayMatch15_process
      if (reset_x == 1'b1) begin
        delayMatch15_reg[0] <= 15'sb000000000000000;
        delayMatch15_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch15_reg[0] <= delayMatch15_reg_next[0];
          delayMatch15_reg[1] <= delayMatch15_reg_next[1];
        end
      end
    end

  assign In25_1 = delayMatch15_reg[1];
  assign delayMatch15_reg_next[0] = In25;
  assign delayMatch15_reg_next[1] = delayMatch15_reg[0];



  always @(posedge clk)
    begin : delayMatch16_process
      if (reset_x == 1'b1) begin
        delayMatch16_reg[0] <= 15'sb000000000000000;
        delayMatch16_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch16_reg[0] <= delayMatch16_reg_next[0];
          delayMatch16_reg[1] <= delayMatch16_reg_next[1];
        end
      end
    end

  assign In26_1 = delayMatch16_reg[1];
  assign delayMatch16_reg_next[0] = In26;
  assign delayMatch16_reg_next[1] = delayMatch16_reg[0];



  always @(posedge clk)
    begin : delayMatch17_process
      if (reset_x == 1'b1) begin
        delayMatch17_reg[0] <= 15'sb000000000000000;
        delayMatch17_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch17_reg[0] <= delayMatch17_reg_next[0];
          delayMatch17_reg[1] <= delayMatch17_reg_next[1];
        end
      end
    end

  assign In27_1 = delayMatch17_reg[1];
  assign delayMatch17_reg_next[0] = In27;
  assign delayMatch17_reg_next[1] = delayMatch17_reg[0];



  always @(posedge clk)
    begin : delayMatch18_process
      if (reset_x == 1'b1) begin
        delayMatch18_reg[0] <= 15'sb000000000000000;
        delayMatch18_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch18_reg[0] <= delayMatch18_reg_next[0];
          delayMatch18_reg[1] <= delayMatch18_reg_next[1];
        end
      end
    end

  assign In28_1 = delayMatch18_reg[1];
  assign delayMatch18_reg_next[0] = In28;
  assign delayMatch18_reg_next[1] = delayMatch18_reg[0];



  always @(posedge clk)
    begin : delayMatch19_process
      if (reset_x == 1'b1) begin
        delayMatch19_reg[0] <= 15'sb000000000000000;
        delayMatch19_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch19_reg[0] <= delayMatch19_reg_next[0];
          delayMatch19_reg[1] <= delayMatch19_reg_next[1];
        end
      end
    end

  assign In29_1 = delayMatch19_reg[1];
  assign delayMatch19_reg_next[0] = In29;
  assign delayMatch19_reg_next[1] = delayMatch19_reg[0];



  always @(posedge clk)
    begin : delayMatch20_process
      if (reset_x == 1'b1) begin
        delayMatch20_reg[0] <= 15'sb000000000000000;
        delayMatch20_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch20_reg[0] <= delayMatch20_reg_next[0];
          delayMatch20_reg[1] <= delayMatch20_reg_next[1];
        end
      end
    end

  assign In30_1 = delayMatch20_reg[1];
  assign delayMatch20_reg_next[0] = In30;
  assign delayMatch20_reg_next[1] = delayMatch20_reg[0];



  always @(posedge clk)
    begin : delayMatch21_process
      if (reset_x == 1'b1) begin
        delayMatch21_reg[0] <= 15'sb000000000000000;
        delayMatch21_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch21_reg[0] <= delayMatch21_reg_next[0];
          delayMatch21_reg[1] <= delayMatch21_reg_next[1];
        end
      end
    end

  assign In31_1 = delayMatch21_reg[1];
  assign delayMatch21_reg_next[0] = In31;
  assign delayMatch21_reg_next[1] = delayMatch21_reg[0];



  always @(posedge clk)
    begin : delayMatch22_process
      if (reset_x == 1'b1) begin
        delayMatch22_reg[0] <= 15'sb000000000000000;
        delayMatch22_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch22_reg[0] <= delayMatch22_reg_next[0];
          delayMatch22_reg[1] <= delayMatch22_reg_next[1];
        end
      end
    end

  assign In37_1 = delayMatch22_reg[1];
  assign delayMatch22_reg_next[0] = In37;
  assign delayMatch22_reg_next[1] = delayMatch22_reg[0];



  always @(posedge clk)
    begin : delayMatch23_process
      if (reset_x == 1'b1) begin
        delayMatch23_reg[0] <= 15'sb000000000000000;
        delayMatch23_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch23_reg[0] <= delayMatch23_reg_next[0];
          delayMatch23_reg[1] <= delayMatch23_reg_next[1];
        end
      end
    end

  assign In38_1 = delayMatch23_reg[1];
  assign delayMatch23_reg_next[0] = In38;
  assign delayMatch23_reg_next[1] = delayMatch23_reg[0];



  always @(posedge clk)
    begin : delayMatch24_process
      if (reset_x == 1'b1) begin
        delayMatch24_reg[0] <= 15'sb000000000000000;
        delayMatch24_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch24_reg[0] <= delayMatch24_reg_next[0];
          delayMatch24_reg[1] <= delayMatch24_reg_next[1];
        end
      end
    end

  assign In39_1 = delayMatch24_reg[1];
  assign delayMatch24_reg_next[0] = In39;
  assign delayMatch24_reg_next[1] = delayMatch24_reg[0];



  always @(posedge clk)
    begin : delayMatch25_process
      if (reset_x == 1'b1) begin
        delayMatch25_reg[0] <= 15'sb000000000000000;
        delayMatch25_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch25_reg[0] <= delayMatch25_reg_next[0];
          delayMatch25_reg[1] <= delayMatch25_reg_next[1];
        end
      end
    end

  assign In40_1 = delayMatch25_reg[1];
  assign delayMatch25_reg_next[0] = In40;
  assign delayMatch25_reg_next[1] = delayMatch25_reg[0];



  always @(posedge clk)
    begin : delayMatch26_process
      if (reset_x == 1'b1) begin
        delayMatch26_reg[0] <= 15'sb000000000000000;
        delayMatch26_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch26_reg[0] <= delayMatch26_reg_next[0];
          delayMatch26_reg[1] <= delayMatch26_reg_next[1];
        end
      end
    end

  assign In41_1 = delayMatch26_reg[1];
  assign delayMatch26_reg_next[0] = In41;
  assign delayMatch26_reg_next[1] = delayMatch26_reg[0];



  always @(posedge clk)
    begin : delayMatch27_process
      if (reset_x == 1'b1) begin
        delayMatch27_reg[0] <= 15'sb000000000000000;
        delayMatch27_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch27_reg[0] <= delayMatch27_reg_next[0];
          delayMatch27_reg[1] <= delayMatch27_reg_next[1];
        end
      end
    end

  assign In47_1 = delayMatch27_reg[1];
  assign delayMatch27_reg_next[0] = In47;
  assign delayMatch27_reg_next[1] = delayMatch27_reg[0];



  always @(posedge clk)
    begin : delayMatch28_process
      if (reset_x == 1'b1) begin
        delayMatch28_reg[0] <= 15'sb000000000000000;
        delayMatch28_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch28_reg[0] <= delayMatch28_reg_next[0];
          delayMatch28_reg[1] <= delayMatch28_reg_next[1];
        end
      end
    end

  assign In48_1 = delayMatch28_reg[1];
  assign delayMatch28_reg_next[0] = In48;
  assign delayMatch28_reg_next[1] = delayMatch28_reg[0];



  always @(posedge clk)
    begin : delayMatch29_process
      if (reset_x == 1'b1) begin
        delayMatch29_reg[0] <= 15'sb000000000000000;
        delayMatch29_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch29_reg[0] <= delayMatch29_reg_next[0];
          delayMatch29_reg[1] <= delayMatch29_reg_next[1];
        end
      end
    end

  assign In49_1 = delayMatch29_reg[1];
  assign delayMatch29_reg_next[0] = In49;
  assign delayMatch29_reg_next[1] = delayMatch29_reg[0];



  always @(posedge clk)
    begin : delayMatch30_process
      if (reset_x == 1'b1) begin
        delayMatch30_reg[0] <= 15'sb000000000000000;
        delayMatch30_reg[1] <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch30_reg[0] <= delayMatch30_reg_next[0];
          delayMatch30_reg[1] <= delayMatch30_reg_next[1];
        end
      end
    end

  assign In50_1 = delayMatch30_reg[1];
  assign delayMatch30_reg_next[0] = In50;
  assign delayMatch30_reg_next[1] = delayMatch30_reg[0];



  assign Multiport_Switch2_out1 = (In51_1 == 8'b00000000 ? In1_1 :
              (In51_1 == 8'b00000001 ? In2 :
              (In51_1 == 8'b00000010 ? In3 :
              (In51_1 == 8'b00000011 ? In4 :
              (In51_1 == 8'b00000100 ? In5 :
              (In51_1 == 8'b00000101 ? In6 :
              (In51_1 == 8'b00000110 ? In7_1 :
              (In51_1 == 8'b00000111 ? In8_1 :
              (In51_1 == 8'b00001000 ? In9_1 :
              (In51_1 == 8'b00001001 ? In10_1 :
              (In51_1 == 8'b00001010 ? In11_1 :
              (In51_1 == 8'b00001011 ? In12 :
              (In51_1 == 8'b00001100 ? In13 :
              (In51_1 == 8'b00001101 ? In14 :
              (In51_1 == 8'b00001110 ? In15 :
              (In51_1 == 8'b00001111 ? In16 :
              (In51_1 == 8'b00010000 ? In17_1 :
              (In51_1 == 8'b00010001 ? In18_1 :
              (In51_1 == 8'b00010010 ? In19_1 :
              (In51_1 == 8'b00010011 ? In20_1 :
              (In51_1 == 8'b00010100 ? In21_1 :
              (In51_1 == 8'b00010101 ? In22_1 :
              (In51_1 == 8'b00010110 ? In23_1 :
              (In51_1 == 8'b00010111 ? In24_1 :
              (In51_1 == 8'b00011000 ? In25_1 :
              (In51_1 == 8'b00011001 ? In26_1 :
              (In51_1 == 8'b00011010 ? In27_1 :
              (In51_1 == 8'b00011011 ? In28_1 :
              (In51_1 == 8'b00011100 ? In29_1 :
              (In51_1 == 8'b00011101 ? In30_1 :
              (In51_1 == 8'b00011110 ? In31_1 :
              (In51_1 == 8'b00011111 ? In32 :
              (In51_1 == 8'b00100000 ? In33 :
              (In51_1 == 8'b00100001 ? In34 :
              (In51_1 == 8'b00100010 ? In35 :
              (In51_1 == 8'b00100011 ? In36 :
              (In51_1 == 8'b00100100 ? In37_1 :
              (In51_1 == 8'b00100101 ? In38_1 :
              (In51_1 == 8'b00100110 ? In39_1 :
              (In51_1 == 8'b00100111 ? In40_1 :
              (In51_1 == 8'b00101000 ? In41_1 :
              (In51_1 == 8'b00101001 ? In42 :
              (In51_1 == 8'b00101010 ? In43 :
              (In51_1 == 8'b00101011 ? In44 :
              (In51_1 == 8'b00101100 ? In45 :
              (In51_1 == 8'b00101101 ? In46 :
              (In51_1 == 8'b00101110 ? In47_1 :
              (In51_1 == 8'b00101111 ? In48_1 :
              (In51_1 == 8'b00110000 ? In49_1 :
              In50_1)))))))))))))))))))))))))))))))))))))))))))))))));



  assign Out2 = Multiport_Switch2_out1;

endmodule  // parallel_serial

