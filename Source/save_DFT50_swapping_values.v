// -------------------------------------------------------------
// 
// File Name: C:\Users\Carlos Cajas\Desktop\henkindama2\newhope_cambios\save_DFT50_swapping_values.v
// Created: 2020-12-20 13:10:04
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: save_DFT50_swapping_values
// Source Path: newhope_cambios/FDHT/DFT_2/save_DFT50_swapping_values
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module save_DFT50_swapping_values
          (clk,
           reset_x,
           enb,
           In1_re,
           In1_im,
           In2_re,
           In2_im,
           In3_re,
           In3_im,
           In4_re,
           In4_im,
           In5_re,
           In5_im,
           In6_re,
           In6_im,
           In7_re,
           In7_im,
           In8_re,
           In8_im,
           In9_re,
           In9_im,
           In10_re,
           In10_im,
           In11_re,
           In11_im,
           In12_re,
           In12_im,
           In13_re,
           In13_im,
           In14_re,
           In14_im,
           In15_re,
           In15_im,
           In16_re,
           In16_im,
           In17_re,
           In17_im,
           In18_re,
           In18_im,
           In19_re,
           In19_im,
           In20_re,
           In20_im,
           In21_re,
           In21_im,
           In22_re,
           In22_im,
           In23_re,
           In23_im,
           In24_re,
           In24_im,
           In25_re,
           In25_im,
           In26,
           Out1_re,
           Out1_im,
           Out2_re,
           Out2_im,
           Out3_re,
           Out3_im,
           Out4_re,
           Out4_im,
           Out5_re,
           Out5_im,
           Out6_re,
           Out6_im,
           Out7_re,
           Out7_im,
           Out8_re,
           Out8_im,
           Out9_re,
           Out9_im,
           Out10_re,
           Out10_im,
           Out11_re,
           Out11_im,
           Out12_re,
           Out12_im,
           Out13_re,
           Out13_im,
           Out14_re,
           Out14_im,
           Out15_re,
           Out15_im,
           Out16_re,
           Out16_im,
           Out17_re,
           Out17_im,
           Out18_re,
           Out18_im,
           Out19_re,
           Out19_im,
           Out20_re,
           Out20_im,
           Out21_re,
           Out21_im,
           Out22_re,
           Out22_im,
           Out23_re,
           Out23_im,
           Out24_re,
           Out24_im,
           Out25_re,
           Out25_im);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [36:0] In1_re;  // sfix37_En22
  input   signed [36:0] In1_im;  // sfix37_En22
  input   signed [36:0] In2_re;  // sfix37_En22
  input   signed [36:0] In2_im;  // sfix37_En22
  input   signed [36:0] In3_re;  // sfix37_En22
  input   signed [36:0] In3_im;  // sfix37_En22
  input   signed [36:0] In4_re;  // sfix37_En22
  input   signed [36:0] In4_im;  // sfix37_En22
  input   signed [36:0] In5_re;  // sfix37_En22
  input   signed [36:0] In5_im;  // sfix37_En22
  input   signed [36:0] In6_re;  // sfix37_En22
  input   signed [36:0] In6_im;  // sfix37_En22
  input   signed [36:0] In7_re;  // sfix37_En22
  input   signed [36:0] In7_im;  // sfix37_En22
  input   signed [36:0] In8_re;  // sfix37_En22
  input   signed [36:0] In8_im;  // sfix37_En22
  input   signed [36:0] In9_re;  // sfix37_En22
  input   signed [36:0] In9_im;  // sfix37_En22
  input   signed [36:0] In10_re;  // sfix37_En22
  input   signed [36:0] In10_im;  // sfix37_En22
  input   signed [36:0] In11_re;  // sfix37_En22
  input   signed [36:0] In11_im;  // sfix37_En22
  input   signed [36:0] In12_re;  // sfix37_En22
  input   signed [36:0] In12_im;  // sfix37_En22
  input   signed [36:0] In13_re;  // sfix37_En22
  input   signed [36:0] In13_im;  // sfix37_En22
  input   signed [36:0] In14_re;  // sfix37_En22
  input   signed [36:0] In14_im;  // sfix37_En22
  input   signed [36:0] In15_re;  // sfix37_En22
  input   signed [36:0] In15_im;  // sfix37_En22
  input   signed [36:0] In16_re;  // sfix37_En22
  input   signed [36:0] In16_im;  // sfix37_En22
  input   signed [36:0] In17_re;  // sfix37_En22
  input   signed [36:0] In17_im;  // sfix37_En22
  input   signed [36:0] In18_re;  // sfix37_En22
  input   signed [36:0] In18_im;  // sfix37_En22
  input   signed [36:0] In19_re;  // sfix37_En22
  input   signed [36:0] In19_im;  // sfix37_En22
  input   signed [36:0] In20_re;  // sfix37_En22
  input   signed [36:0] In20_im;  // sfix37_En22
  input   signed [36:0] In21_re;  // sfix37_En22
  input   signed [36:0] In21_im;  // sfix37_En22
  input   signed [36:0] In22_re;  // sfix37_En22
  input   signed [36:0] In22_im;  // sfix37_En22
  input   signed [36:0] In23_re;  // sfix37_En22
  input   signed [36:0] In23_im;  // sfix37_En22
  input   signed [36:0] In24_re;  // sfix37_En22
  input   signed [36:0] In24_im;  // sfix37_En22
  input   signed [36:0] In25_re;  // sfix37_En22
  input   signed [36:0] In25_im;  // sfix37_En22
  input   [7:0] In26;  // uint8
  output  signed [36:0] Out1_re;  // sfix37_En22
  output  signed [36:0] Out1_im;  // sfix37_En22
  output  signed [36:0] Out2_re;  // sfix37_En22
  output  signed [36:0] Out2_im;  // sfix37_En22
  output  signed [36:0] Out3_re;  // sfix37_En22
  output  signed [36:0] Out3_im;  // sfix37_En22
  output  signed [36:0] Out4_re;  // sfix37_En22
  output  signed [36:0] Out4_im;  // sfix37_En22
  output  signed [36:0] Out5_re;  // sfix37_En22
  output  signed [36:0] Out5_im;  // sfix37_En22
  output  signed [36:0] Out6_re;  // sfix37_En22
  output  signed [36:0] Out6_im;  // sfix37_En22
  output  signed [36:0] Out7_re;  // sfix37_En22
  output  signed [36:0] Out7_im;  // sfix37_En22
  output  signed [36:0] Out8_re;  // sfix37_En22
  output  signed [36:0] Out8_im;  // sfix37_En22
  output  signed [36:0] Out9_re;  // sfix37_En22
  output  signed [36:0] Out9_im;  // sfix37_En22
  output  signed [36:0] Out10_re;  // sfix37_En22
  output  signed [36:0] Out10_im;  // sfix37_En22
  output  signed [36:0] Out11_re;  // sfix37_En22
  output  signed [36:0] Out11_im;  // sfix37_En22
  output  signed [36:0] Out12_re;  // sfix37_En22
  output  signed [36:0] Out12_im;  // sfix37_En22
  output  signed [36:0] Out13_re;  // sfix37_En22
  output  signed [36:0] Out13_im;  // sfix37_En22
  output  signed [36:0] Out14_re;  // sfix37_En22
  output  signed [36:0] Out14_im;  // sfix37_En22
  output  signed [36:0] Out15_re;  // sfix37_En22
  output  signed [36:0] Out15_im;  // sfix37_En22
  output  signed [36:0] Out16_re;  // sfix37_En22
  output  signed [36:0] Out16_im;  // sfix37_En22
  output  signed [36:0] Out17_re;  // sfix37_En22
  output  signed [36:0] Out17_im;  // sfix37_En22
  output  signed [36:0] Out18_re;  // sfix37_En22
  output  signed [36:0] Out18_im;  // sfix37_En22
  output  signed [36:0] Out19_re;  // sfix37_En22
  output  signed [36:0] Out19_im;  // sfix37_En22
  output  signed [36:0] Out20_re;  // sfix37_En22
  output  signed [36:0] Out20_im;  // sfix37_En22
  output  signed [36:0] Out21_re;  // sfix37_En22
  output  signed [36:0] Out21_im;  // sfix37_En22
  output  signed [36:0] Out22_re;  // sfix37_En22
  output  signed [36:0] Out22_im;  // sfix37_En22
  output  signed [36:0] Out23_re;  // sfix37_En22
  output  signed [36:0] Out23_im;  // sfix37_En22
  output  signed [36:0] Out24_re;  // sfix37_En22
  output  signed [36:0] Out24_im;  // sfix37_En22
  output  signed [36:0] Out25_re;  // sfix37_En22
  output  signed [36:0] Out25_im;  // sfix37_En22


  wire [1:0] Constant13_out1;  // ufix2
  wire Constant5_out1;
  wire Constant4_out1;
  wire Multiport_Switch2_out1;
  reg  [0:9] reduced_reg;  // ufix1 [10]
  wire [0:9] reduced_reg_next;  // ufix1 [10]
  wire Multiport_Switch2_out1_1;
  wire signed [36:0] Single_Port_RAM20_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM1_out1;  // sfix37_En22
  wire [1:0] Constant6_out1;  // ufix2
  wire Constant8_out1;
  wire Constant7_out1;
  wire Multiport_Switch1_out1;
  reg  [0:9] reduced_reg_1;  // ufix1 [10]
  wire [0:9] reduced_reg_next_1;  // ufix1 [10]
  wire Multiport_Switch1_out1_1;
  wire signed [36:0] Single_Port_RAM6_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM4_out1;  // sfix37_En22
  wire [1:0] Constant9_out1;  // ufix2
  wire Constant11_out1;
  wire Constant10_out1;
  wire Multiport_Switch4_out1;
  reg  [0:9] reduced_reg_2;  // ufix1 [10]
  wire [0:9] reduced_reg_next_2;  // ufix1 [10]
  wire Multiport_Switch4_out1_1;
  wire signed [36:0] Single_Port_RAM10_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM8_out1;  // sfix37_En22
  wire [1:0] Constant12_out1;  // ufix2
  wire Constant15_out1;
  wire Constant14_out1;
  wire Multiport_Switch3_out1;
  reg  [0:9] reduced_reg_3;  // ufix1 [10]
  wire [0:9] reduced_reg_next_3;  // ufix1 [10]
  wire Multiport_Switch3_out1_1;
  wire signed [36:0] Single_Port_RAM14_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM12_out1;  // sfix37_En22
  wire [1:0] Constant16_out1;  // ufix2
  wire Constant18_out1;
  wire Constant17_out1;
  wire Multiport_Switch6_out1;
  reg  [0:9] reduced_reg_4;  // ufix1 [10]
  wire [0:9] reduced_reg_next_4;  // ufix1 [10]
  wire Multiport_Switch6_out1_1;
  wire signed [36:0] Single_Port_RAM18_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM16_out1;  // sfix37_En22
  reg  [0:1] reduced_reg_5;  // ufix1 [2]
  wire [0:1] reduced_reg_next_5;  // ufix1 [2]
  wire Multiport_Switch2_out1_2;
  wire signed [36:0] Single_Port_RAM3_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM2_out1;  // sfix37_En22
  reg  [0:1] reduced_reg_6;  // ufix1 [2]
  wire [0:1] reduced_reg_next_6;  // ufix1 [2]
  wire Multiport_Switch1_out1_2;
  wire signed [36:0] Single_Port_RAM7_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM5_out1;  // sfix37_En22
  reg  [0:1] reduced_reg_7;  // ufix1 [2]
  wire [0:1] reduced_reg_next_7;  // ufix1 [2]
  wire Multiport_Switch4_out1_2;
  wire signed [36:0] Single_Port_RAM11_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM9_out1;  // sfix37_En22
  reg  [0:1] reduced_reg_8;  // ufix1 [2]
  wire [0:1] reduced_reg_next_8;  // ufix1 [2]
  wire Multiport_Switch3_out1_2;
  wire signed [36:0] Single_Port_RAM15_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM13_out1;  // sfix37_En22
  reg  [0:1] reduced_reg_9;  // ufix1 [2]
  wire [0:1] reduced_reg_next_9;  // ufix1 [2]
  wire Multiport_Switch6_out1_2;
  wire signed [36:0] Single_Port_RAM19_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM17_out1;  // sfix37_En22
  wire [1:0] Constant22_out1;  // ufix2
  wire Constant29_out1;
  wire Constant28_out1;
  wire Multiport_Switch7_out1;
  reg  [0:11] reduced_reg_10;  // ufix1 [12]
  wire [0:11] reduced_reg_next_10;  // ufix1 [12]
  wire Multiport_Switch7_out1_1;
  wire signed [36:0] Single_Port_RAM33_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM21_out1;  // sfix37_En22
  wire [1:0] Constant30_out1;  // ufix2
  wire Constant32_out1;
  wire Constant31_out1;
  wire Multiport_Switch5_out1;
  reg  [0:11] reduced_reg_11;  // ufix1 [12]
  wire [0:11] reduced_reg_next_11;  // ufix1 [12]
  wire Multiport_Switch5_out1_1;
  wire signed [36:0] Single_Port_RAM37_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM35_out1;  // sfix37_En22
  wire [1:0] Constant33_out1;  // ufix2
  wire Constant20_out1;
  wire Constant19_out1;
  wire Multiport_Switch9_out1;
  reg  [0:11] reduced_reg_12;  // ufix1 [12]
  wire [0:11] reduced_reg_next_12;  // ufix1 [12]
  wire Multiport_Switch9_out1_1;
  wire signed [36:0] Single_Port_RAM22_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM39_out1;  // sfix37_En22
  wire [1:0] Constant21_out1;  // ufix2
  wire Constant24_out1;
  wire Constant23_out1;
  wire Multiport_Switch8_out1;
  reg  [0:11] reduced_reg_13;  // ufix1 [12]
  wire [0:11] reduced_reg_next_13;  // ufix1 [12]
  wire Multiport_Switch8_out1_1;
  wire signed [36:0] Single_Port_RAM26_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM24_out1;  // sfix37_En22
  wire [1:0] Constant25_out1;  // ufix2
  wire Constant27_out1;
  wire Constant26_out1;
  wire Multiport_Switch10_out1;
  reg  [0:11] reduced_reg_14;  // ufix1 [12]
  wire [0:11] reduced_reg_next_14;  // ufix1 [12]
  wire Multiport_Switch10_out1_1;
  wire signed [36:0] Single_Port_RAM30_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM28_out1;  // sfix37_En22
  reg  [0:1] reduced_reg_15;  // ufix1 [2]
  wire [0:1] reduced_reg_next_15;  // ufix1 [2]
  wire Multiport_Switch7_out1_2;
  wire signed [36:0] Single_Port_RAM34_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM32_out1;  // sfix37_En22
  reg  [0:1] reduced_reg_16;  // ufix1 [2]
  wire [0:1] reduced_reg_next_16;  // ufix1 [2]
  wire Multiport_Switch5_out1_2;
  wire signed [36:0] Single_Port_RAM38_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM36_out1;  // sfix37_En22
  reg  [0:1] reduced_reg_17;  // ufix1 [2]
  wire [0:1] reduced_reg_next_17;  // ufix1 [2]
  wire Multiport_Switch9_out1_2;
  wire signed [36:0] Single_Port_RAM23_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM40_out1;  // sfix37_En22
  reg  [0:1] reduced_reg_18;  // ufix1 [2]
  wire [0:1] reduced_reg_next_18;  // ufix1 [2]
  wire Multiport_Switch8_out1_2;
  wire signed [36:0] Single_Port_RAM27_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM25_out1;  // sfix37_En22
  reg  [0:1] reduced_reg_19;  // ufix1 [2]
  wire [0:1] reduced_reg_next_19;  // ufix1 [2]
  wire Multiport_Switch10_out1_2;
  wire signed [36:0] Single_Port_RAM31_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM29_out1;  // sfix37_En22
  wire [1:0] Constant37_out1;  // ufix2
  wire Constant44_out1;
  wire Constant43_out1;
  wire Multiport_Switch12_out1;
  reg  [0:11] reduced_reg_20;  // ufix1 [12]
  wire [0:11] reduced_reg_next_20;  // ufix1 [12]
  wire Multiport_Switch12_out1_1;
  wire signed [36:0] Single_Port_RAM47_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM41_out1;  // sfix37_En22
  wire [1:0] Constant45_out1;  // ufix2
  wire Constant47_out1;
  wire Constant46_out1;
  wire Multiport_Switch11_out1;
  reg  [0:11] reduced_reg_21;  // ufix1 [12]
  wire [0:11] reduced_reg_next_21;  // ufix1 [12]
  wire Multiport_Switch11_out1_1;
  wire signed [36:0] Single_Port_RAM49_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM48_out1;  // sfix37_En22
  wire [1:0] Constant48_out1;  // ufix2
  wire Constant35_out1;
  wire Constant34_out1;
  wire Multiport_Switch14_out1;
  reg  [0:11] reduced_reg_22;  // ufix1 [12]
  wire [0:11] reduced_reg_next_22;  // ufix1 [12]
  wire Multiport_Switch14_out1_1;
  wire signed [36:0] Single_Port_RAM42_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM50_out1;  // sfix37_En22
  wire [1:0] Constant36_out1;  // ufix2
  wire Constant39_out1;
  wire Constant38_out1;
  wire Multiport_Switch13_out1;
  reg  [0:11] reduced_reg_23;  // ufix1 [12]
  wire [0:11] reduced_reg_next_23;  // ufix1 [12]
  wire Multiport_Switch13_out1_1;
  wire signed [36:0] Single_Port_RAM44_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM43_out1;  // sfix37_En22
  wire [1:0] Constant40_out1;  // ufix2
  wire Constant42_out1;
  wire Constant41_out1;
  wire Multiport_Switch15_out1;
  reg  [0:11] reduced_reg_24;  // ufix1 [12]
  wire [0:11] reduced_reg_next_24;  // ufix1 [12]
  wire Multiport_Switch15_out1_1;
  wire signed [36:0] Single_Port_RAM46_out1;  // sfix37_En22
  wire signed [36:0] Single_Port_RAM45_out1;  // sfix37_En22


  assign Constant13_out1 = 2'b01;



  assign Constant5_out1 = 1'b0;



  assign Constant4_out1 = 1'b1;



  assign Multiport_Switch2_out1 = (In26 == 8'b00000000 ? Constant5_out1 :
              (In26 == 8'b00000001 ? Constant5_out1 :
              (In26 == 8'b00000010 ? Constant5_out1 :
              (In26 == 8'b00000011 ? Constant5_out1 :
              (In26 == 8'b00000100 ? Constant5_out1 :
              (In26 == 8'b00000101 ? Constant5_out1 :
              (In26 == 8'b00000110 ? Constant4_out1 :
              (In26 == 8'b00000111 ? Constant5_out1 :
              (In26 == 8'b00001000 ? Constant5_out1 :
              (In26 == 8'b00001001 ? Constant5_out1 :
              Constant5_out1))))))))));



  always @(posedge clk)
    begin : reduced_process
      if (reset_x == 1'b1) begin
        reduced_reg[0] <= 1'b0;
        reduced_reg[1] <= 1'b0;
        reduced_reg[2] <= 1'b0;
        reduced_reg[3] <= 1'b0;
        reduced_reg[4] <= 1'b0;
        reduced_reg[5] <= 1'b0;
        reduced_reg[6] <= 1'b0;
        reduced_reg[7] <= 1'b0;
        reduced_reg[8] <= 1'b0;
        reduced_reg[9] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
          reduced_reg[2] <= reduced_reg_next[2];
          reduced_reg[3] <= reduced_reg_next[3];
          reduced_reg[4] <= reduced_reg_next[4];
          reduced_reg[5] <= reduced_reg_next[5];
          reduced_reg[6] <= reduced_reg_next[6];
          reduced_reg[7] <= reduced_reg_next[7];
          reduced_reg[8] <= reduced_reg_next[8];
          reduced_reg[9] <= reduced_reg_next[9];
        end
      end
    end

  assign Multiport_Switch2_out1_1 = reduced_reg[9];
  assign reduced_reg_next[0] = Multiport_Switch2_out1;
  assign reduced_reg_next[1] = reduced_reg[0];
  assign reduced_reg_next[2] = reduced_reg[1];
  assign reduced_reg_next[3] = reduced_reg[2];
  assign reduced_reg_next[4] = reduced_reg[3];
  assign reduced_reg_next[5] = reduced_reg[4];
  assign reduced_reg_next[6] = reduced_reg[5];
  assign reduced_reg_next[7] = reduced_reg[6];
  assign reduced_reg_next[8] = reduced_reg[7];
  assign reduced_reg_next[9] = reduced_reg[8];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM20 (.clk(clk),
                                             .enb(enb),
                                             .din(In1_re),
                                             .addr(Constant13_out1),
                                             .we(Multiport_Switch2_out1_1),
                                             .dout(Single_Port_RAM20_out1)
                                             );

  assign Out1_re = Single_Port_RAM20_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM1 (.clk(clk),
                                            .enb(enb),
                                            .din(In1_im),
                                            .addr(Constant13_out1),
                                            .we(Multiport_Switch2_out1_1),
                                            .dout(Single_Port_RAM1_out1)
                                            );

  assign Out1_im = Single_Port_RAM1_out1;

  assign Constant6_out1 = 2'b01;



  assign Constant8_out1 = 1'b0;



  assign Constant7_out1 = 1'b1;



  assign Multiport_Switch1_out1 = (In26 == 8'b00000000 ? Constant8_out1 :
              (In26 == 8'b00000001 ? Constant8_out1 :
              (In26 == 8'b00000010 ? Constant8_out1 :
              (In26 == 8'b00000011 ? Constant8_out1 :
              (In26 == 8'b00000100 ? Constant8_out1 :
              (In26 == 8'b00000101 ? Constant8_out1 :
              (In26 == 8'b00000110 ? Constant8_out1 :
              (In26 == 8'b00000111 ? Constant7_out1 :
              (In26 == 8'b00001000 ? Constant8_out1 :
              (In26 == 8'b00001001 ? Constant8_out1 :
              Constant8_out1))))))))));



  always @(posedge clk)
    begin : reduced_1_process
      if (reset_x == 1'b1) begin
        reduced_reg_1[0] <= 1'b0;
        reduced_reg_1[1] <= 1'b0;
        reduced_reg_1[2] <= 1'b0;
        reduced_reg_1[3] <= 1'b0;
        reduced_reg_1[4] <= 1'b0;
        reduced_reg_1[5] <= 1'b0;
        reduced_reg_1[6] <= 1'b0;
        reduced_reg_1[7] <= 1'b0;
        reduced_reg_1[8] <= 1'b0;
        reduced_reg_1[9] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_1[0] <= reduced_reg_next_1[0];
          reduced_reg_1[1] <= reduced_reg_next_1[1];
          reduced_reg_1[2] <= reduced_reg_next_1[2];
          reduced_reg_1[3] <= reduced_reg_next_1[3];
          reduced_reg_1[4] <= reduced_reg_next_1[4];
          reduced_reg_1[5] <= reduced_reg_next_1[5];
          reduced_reg_1[6] <= reduced_reg_next_1[6];
          reduced_reg_1[7] <= reduced_reg_next_1[7];
          reduced_reg_1[8] <= reduced_reg_next_1[8];
          reduced_reg_1[9] <= reduced_reg_next_1[9];
        end
      end
    end

  assign Multiport_Switch1_out1_1 = reduced_reg_1[9];
  assign reduced_reg_next_1[0] = Multiport_Switch1_out1;
  assign reduced_reg_next_1[1] = reduced_reg_1[0];
  assign reduced_reg_next_1[2] = reduced_reg_1[1];
  assign reduced_reg_next_1[3] = reduced_reg_1[2];
  assign reduced_reg_next_1[4] = reduced_reg_1[3];
  assign reduced_reg_next_1[5] = reduced_reg_1[4];
  assign reduced_reg_next_1[6] = reduced_reg_1[5];
  assign reduced_reg_next_1[7] = reduced_reg_1[6];
  assign reduced_reg_next_1[8] = reduced_reg_1[7];
  assign reduced_reg_next_1[9] = reduced_reg_1[8];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM6 (.clk(clk),
                                            .enb(enb),
                                            .din(In2_re),
                                            .addr(Constant6_out1),
                                            .we(Multiport_Switch1_out1_1),
                                            .dout(Single_Port_RAM6_out1)
                                            );

  assign Out2_re = Single_Port_RAM6_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM4 (.clk(clk),
                                            .enb(enb),
                                            .din(In2_im),
                                            .addr(Constant6_out1),
                                            .we(Multiport_Switch1_out1_1),
                                            .dout(Single_Port_RAM4_out1)
                                            );

  assign Out2_im = Single_Port_RAM4_out1;

  assign Constant9_out1 = 2'b01;



  assign Constant11_out1 = 1'b0;



  assign Constant10_out1 = 1'b1;



  assign Multiport_Switch4_out1 = (In26 == 8'b00000000 ? Constant11_out1 :
              (In26 == 8'b00000001 ? Constant11_out1 :
              (In26 == 8'b00000010 ? Constant11_out1 :
              (In26 == 8'b00000011 ? Constant11_out1 :
              (In26 == 8'b00000100 ? Constant11_out1 :
              (In26 == 8'b00000101 ? Constant11_out1 :
              (In26 == 8'b00000110 ? Constant11_out1 :
              (In26 == 8'b00000111 ? Constant11_out1 :
              (In26 == 8'b00001000 ? Constant10_out1 :
              (In26 == 8'b00001001 ? Constant11_out1 :
              Constant11_out1))))))))));



  always @(posedge clk)
    begin : reduced_2_process
      if (reset_x == 1'b1) begin
        reduced_reg_2[0] <= 1'b0;
        reduced_reg_2[1] <= 1'b0;
        reduced_reg_2[2] <= 1'b0;
        reduced_reg_2[3] <= 1'b0;
        reduced_reg_2[4] <= 1'b0;
        reduced_reg_2[5] <= 1'b0;
        reduced_reg_2[6] <= 1'b0;
        reduced_reg_2[7] <= 1'b0;
        reduced_reg_2[8] <= 1'b0;
        reduced_reg_2[9] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_2[0] <= reduced_reg_next_2[0];
          reduced_reg_2[1] <= reduced_reg_next_2[1];
          reduced_reg_2[2] <= reduced_reg_next_2[2];
          reduced_reg_2[3] <= reduced_reg_next_2[3];
          reduced_reg_2[4] <= reduced_reg_next_2[4];
          reduced_reg_2[5] <= reduced_reg_next_2[5];
          reduced_reg_2[6] <= reduced_reg_next_2[6];
          reduced_reg_2[7] <= reduced_reg_next_2[7];
          reduced_reg_2[8] <= reduced_reg_next_2[8];
          reduced_reg_2[9] <= reduced_reg_next_2[9];
        end
      end
    end

  assign Multiport_Switch4_out1_1 = reduced_reg_2[9];
  assign reduced_reg_next_2[0] = Multiport_Switch4_out1;
  assign reduced_reg_next_2[1] = reduced_reg_2[0];
  assign reduced_reg_next_2[2] = reduced_reg_2[1];
  assign reduced_reg_next_2[3] = reduced_reg_2[2];
  assign reduced_reg_next_2[4] = reduced_reg_2[3];
  assign reduced_reg_next_2[5] = reduced_reg_2[4];
  assign reduced_reg_next_2[6] = reduced_reg_2[5];
  assign reduced_reg_next_2[7] = reduced_reg_2[6];
  assign reduced_reg_next_2[8] = reduced_reg_2[7];
  assign reduced_reg_next_2[9] = reduced_reg_2[8];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM10 (.clk(clk),
                                             .enb(enb),
                                             .din(In3_re),
                                             .addr(Constant9_out1),
                                             .we(Multiport_Switch4_out1_1),
                                             .dout(Single_Port_RAM10_out1)
                                             );

  assign Out3_re = Single_Port_RAM10_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM8 (.clk(clk),
                                            .enb(enb),
                                            .din(In3_im),
                                            .addr(Constant9_out1),
                                            .we(Multiport_Switch4_out1_1),
                                            .dout(Single_Port_RAM8_out1)
                                            );

  assign Out3_im = Single_Port_RAM8_out1;

  assign Constant12_out1 = 2'b01;



  assign Constant15_out1 = 1'b0;



  assign Constant14_out1 = 1'b1;



  assign Multiport_Switch3_out1 = (In26 == 8'b00000000 ? Constant15_out1 :
              (In26 == 8'b00000001 ? Constant15_out1 :
              (In26 == 8'b00000010 ? Constant15_out1 :
              (In26 == 8'b00000011 ? Constant15_out1 :
              (In26 == 8'b00000100 ? Constant15_out1 :
              (In26 == 8'b00000101 ? Constant15_out1 :
              (In26 == 8'b00000110 ? Constant15_out1 :
              (In26 == 8'b00000111 ? Constant15_out1 :
              (In26 == 8'b00001000 ? Constant15_out1 :
              (In26 == 8'b00001001 ? Constant14_out1 :
              Constant15_out1))))))))));



  always @(posedge clk)
    begin : reduced_3_process
      if (reset_x == 1'b1) begin
        reduced_reg_3[0] <= 1'b0;
        reduced_reg_3[1] <= 1'b0;
        reduced_reg_3[2] <= 1'b0;
        reduced_reg_3[3] <= 1'b0;
        reduced_reg_3[4] <= 1'b0;
        reduced_reg_3[5] <= 1'b0;
        reduced_reg_3[6] <= 1'b0;
        reduced_reg_3[7] <= 1'b0;
        reduced_reg_3[8] <= 1'b0;
        reduced_reg_3[9] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_3[0] <= reduced_reg_next_3[0];
          reduced_reg_3[1] <= reduced_reg_next_3[1];
          reduced_reg_3[2] <= reduced_reg_next_3[2];
          reduced_reg_3[3] <= reduced_reg_next_3[3];
          reduced_reg_3[4] <= reduced_reg_next_3[4];
          reduced_reg_3[5] <= reduced_reg_next_3[5];
          reduced_reg_3[6] <= reduced_reg_next_3[6];
          reduced_reg_3[7] <= reduced_reg_next_3[7];
          reduced_reg_3[8] <= reduced_reg_next_3[8];
          reduced_reg_3[9] <= reduced_reg_next_3[9];
        end
      end
    end

  assign Multiport_Switch3_out1_1 = reduced_reg_3[9];
  assign reduced_reg_next_3[0] = Multiport_Switch3_out1;
  assign reduced_reg_next_3[1] = reduced_reg_3[0];
  assign reduced_reg_next_3[2] = reduced_reg_3[1];
  assign reduced_reg_next_3[3] = reduced_reg_3[2];
  assign reduced_reg_next_3[4] = reduced_reg_3[3];
  assign reduced_reg_next_3[5] = reduced_reg_3[4];
  assign reduced_reg_next_3[6] = reduced_reg_3[5];
  assign reduced_reg_next_3[7] = reduced_reg_3[6];
  assign reduced_reg_next_3[8] = reduced_reg_3[7];
  assign reduced_reg_next_3[9] = reduced_reg_3[8];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM14 (.clk(clk),
                                             .enb(enb),
                                             .din(In4_re),
                                             .addr(Constant12_out1),
                                             .we(Multiport_Switch3_out1_1),
                                             .dout(Single_Port_RAM14_out1)
                                             );

  assign Out4_re = Single_Port_RAM14_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM12 (.clk(clk),
                                             .enb(enb),
                                             .din(In4_im),
                                             .addr(Constant12_out1),
                                             .we(Multiport_Switch3_out1_1),
                                             .dout(Single_Port_RAM12_out1)
                                             );

  assign Out4_im = Single_Port_RAM12_out1;

  assign Constant16_out1 = 2'b01;



  assign Constant18_out1 = 1'b0;



  assign Constant17_out1 = 1'b1;



  assign Multiport_Switch6_out1 = (In26 == 8'b00000000 ? Constant18_out1 :
              (In26 == 8'b00000001 ? Constant18_out1 :
              (In26 == 8'b00000010 ? Constant18_out1 :
              (In26 == 8'b00000011 ? Constant18_out1 :
              (In26 == 8'b00000100 ? Constant18_out1 :
              (In26 == 8'b00000101 ? Constant18_out1 :
              (In26 == 8'b00000110 ? Constant18_out1 :
              (In26 == 8'b00000111 ? Constant18_out1 :
              (In26 == 8'b00001000 ? Constant18_out1 :
              (In26 == 8'b00001001 ? Constant18_out1 :
              Constant17_out1))))))))));



  always @(posedge clk)
    begin : reduced_4_process
      if (reset_x == 1'b1) begin
        reduced_reg_4[0] <= 1'b0;
        reduced_reg_4[1] <= 1'b0;
        reduced_reg_4[2] <= 1'b0;
        reduced_reg_4[3] <= 1'b0;
        reduced_reg_4[4] <= 1'b0;
        reduced_reg_4[5] <= 1'b0;
        reduced_reg_4[6] <= 1'b0;
        reduced_reg_4[7] <= 1'b0;
        reduced_reg_4[8] <= 1'b0;
        reduced_reg_4[9] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_4[0] <= reduced_reg_next_4[0];
          reduced_reg_4[1] <= reduced_reg_next_4[1];
          reduced_reg_4[2] <= reduced_reg_next_4[2];
          reduced_reg_4[3] <= reduced_reg_next_4[3];
          reduced_reg_4[4] <= reduced_reg_next_4[4];
          reduced_reg_4[5] <= reduced_reg_next_4[5];
          reduced_reg_4[6] <= reduced_reg_next_4[6];
          reduced_reg_4[7] <= reduced_reg_next_4[7];
          reduced_reg_4[8] <= reduced_reg_next_4[8];
          reduced_reg_4[9] <= reduced_reg_next_4[9];
        end
      end
    end

  assign Multiport_Switch6_out1_1 = reduced_reg_4[9];
  assign reduced_reg_next_4[0] = Multiport_Switch6_out1;
  assign reduced_reg_next_4[1] = reduced_reg_4[0];
  assign reduced_reg_next_4[2] = reduced_reg_4[1];
  assign reduced_reg_next_4[3] = reduced_reg_4[2];
  assign reduced_reg_next_4[4] = reduced_reg_4[3];
  assign reduced_reg_next_4[5] = reduced_reg_4[4];
  assign reduced_reg_next_4[6] = reduced_reg_4[5];
  assign reduced_reg_next_4[7] = reduced_reg_4[6];
  assign reduced_reg_next_4[8] = reduced_reg_4[7];
  assign reduced_reg_next_4[9] = reduced_reg_4[8];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM18 (.clk(clk),
                                             .enb(enb),
                                             .din(In5_re),
                                             .addr(Constant16_out1),
                                             .we(Multiport_Switch6_out1_1),
                                             .dout(Single_Port_RAM18_out1)
                                             );

  assign Out5_re = Single_Port_RAM18_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM16 (.clk(clk),
                                             .enb(enb),
                                             .din(In5_im),
                                             .addr(Constant16_out1),
                                             .we(Multiport_Switch6_out1_1),
                                             .dout(Single_Port_RAM16_out1)
                                             );

  assign Out5_im = Single_Port_RAM16_out1;

  always @(posedge clk)
    begin : reduced_5_process
      if (reset_x == 1'b1) begin
        reduced_reg_5[0] <= 1'b0;
        reduced_reg_5[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_5[0] <= reduced_reg_next_5[0];
          reduced_reg_5[1] <= reduced_reg_next_5[1];
        end
      end
    end

  assign Multiport_Switch2_out1_2 = reduced_reg_5[1];
  assign reduced_reg_next_5[0] = Multiport_Switch2_out1_1;
  assign reduced_reg_next_5[1] = reduced_reg_5[0];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM3 (.clk(clk),
                                            .enb(enb),
                                            .din(In6_re),
                                            .addr(Constant13_out1),
                                            .we(Multiport_Switch2_out1_2),
                                            .dout(Single_Port_RAM3_out1)
                                            );

  assign Out6_re = Single_Port_RAM3_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM2 (.clk(clk),
                                            .enb(enb),
                                            .din(In6_im),
                                            .addr(Constant13_out1),
                                            .we(Multiport_Switch2_out1_2),
                                            .dout(Single_Port_RAM2_out1)
                                            );

  assign Out6_im = Single_Port_RAM2_out1;

  always @(posedge clk)
    begin : reduced_6_process
      if (reset_x == 1'b1) begin
        reduced_reg_6[0] <= 1'b0;
        reduced_reg_6[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_6[0] <= reduced_reg_next_6[0];
          reduced_reg_6[1] <= reduced_reg_next_6[1];
        end
      end
    end

  assign Multiport_Switch1_out1_2 = reduced_reg_6[1];
  assign reduced_reg_next_6[0] = Multiport_Switch1_out1_1;
  assign reduced_reg_next_6[1] = reduced_reg_6[0];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM7 (.clk(clk),
                                            .enb(enb),
                                            .din(In7_re),
                                            .addr(Constant6_out1),
                                            .we(Multiport_Switch1_out1_2),
                                            .dout(Single_Port_RAM7_out1)
                                            );

  assign Out7_re = Single_Port_RAM7_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM5 (.clk(clk),
                                            .enb(enb),
                                            .din(In7_im),
                                            .addr(Constant6_out1),
                                            .we(Multiport_Switch1_out1_2),
                                            .dout(Single_Port_RAM5_out1)
                                            );

  assign Out7_im = Single_Port_RAM5_out1;

  always @(posedge clk)
    begin : reduced_7_process
      if (reset_x == 1'b1) begin
        reduced_reg_7[0] <= 1'b0;
        reduced_reg_7[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_7[0] <= reduced_reg_next_7[0];
          reduced_reg_7[1] <= reduced_reg_next_7[1];
        end
      end
    end

  assign Multiport_Switch4_out1_2 = reduced_reg_7[1];
  assign reduced_reg_next_7[0] = Multiport_Switch4_out1_1;
  assign reduced_reg_next_7[1] = reduced_reg_7[0];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM11 (.clk(clk),
                                             .enb(enb),
                                             .din(In8_re),
                                             .addr(Constant9_out1),
                                             .we(Multiport_Switch4_out1_2),
                                             .dout(Single_Port_RAM11_out1)
                                             );

  assign Out8_re = Single_Port_RAM11_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM9 (.clk(clk),
                                            .enb(enb),
                                            .din(In8_im),
                                            .addr(Constant9_out1),
                                            .we(Multiport_Switch4_out1_2),
                                            .dout(Single_Port_RAM9_out1)
                                            );

  assign Out8_im = Single_Port_RAM9_out1;

  always @(posedge clk)
    begin : reduced_8_process
      if (reset_x == 1'b1) begin
        reduced_reg_8[0] <= 1'b0;
        reduced_reg_8[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_8[0] <= reduced_reg_next_8[0];
          reduced_reg_8[1] <= reduced_reg_next_8[1];
        end
      end
    end

  assign Multiport_Switch3_out1_2 = reduced_reg_8[1];
  assign reduced_reg_next_8[0] = Multiport_Switch3_out1_1;
  assign reduced_reg_next_8[1] = reduced_reg_8[0];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM15 (.clk(clk),
                                             .enb(enb),
                                             .din(In9_re),
                                             .addr(Constant12_out1),
                                             .we(Multiport_Switch3_out1_2),
                                             .dout(Single_Port_RAM15_out1)
                                             );

  assign Out9_re = Single_Port_RAM15_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM13 (.clk(clk),
                                             .enb(enb),
                                             .din(In9_im),
                                             .addr(Constant12_out1),
                                             .we(Multiport_Switch3_out1_2),
                                             .dout(Single_Port_RAM13_out1)
                                             );

  assign Out9_im = Single_Port_RAM13_out1;

  always @(posedge clk)
    begin : reduced_9_process
      if (reset_x == 1'b1) begin
        reduced_reg_9[0] <= 1'b0;
        reduced_reg_9[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_9[0] <= reduced_reg_next_9[0];
          reduced_reg_9[1] <= reduced_reg_next_9[1];
        end
      end
    end

  assign Multiport_Switch6_out1_2 = reduced_reg_9[1];
  assign reduced_reg_next_9[0] = Multiport_Switch6_out1_1;
  assign reduced_reg_next_9[1] = reduced_reg_9[0];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM19 (.clk(clk),
                                             .enb(enb),
                                             .din(In10_re),
                                             .addr(Constant16_out1),
                                             .we(Multiport_Switch6_out1_2),
                                             .dout(Single_Port_RAM19_out1)
                                             );

  assign Out10_re = Single_Port_RAM19_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM17 (.clk(clk),
                                             .enb(enb),
                                             .din(In10_im),
                                             .addr(Constant16_out1),
                                             .we(Multiport_Switch6_out1_2),
                                             .dout(Single_Port_RAM17_out1)
                                             );

  assign Out10_im = Single_Port_RAM17_out1;

  assign Constant22_out1 = 2'b01;



  assign Constant29_out1 = 1'b0;



  assign Constant28_out1 = 1'b1;



  assign Multiport_Switch7_out1 = (In26 == 8'b00000000 ? Constant29_out1 :
              (In26 == 8'b00000001 ? Constant29_out1 :
              (In26 == 8'b00000010 ? Constant29_out1 :
              (In26 == 8'b00000011 ? Constant29_out1 :
              (In26 == 8'b00000100 ? Constant29_out1 :
              (In26 == 8'b00000101 ? Constant29_out1 :
              (In26 == 8'b00000110 ? Constant28_out1 :
              (In26 == 8'b00000111 ? Constant29_out1 :
              (In26 == 8'b00001000 ? Constant29_out1 :
              (In26 == 8'b00001001 ? Constant29_out1 :
              Constant29_out1))))))))));



  always @(posedge clk)
    begin : reduced_10_process
      if (reset_x == 1'b1) begin
        reduced_reg_10[0] <= 1'b0;
        reduced_reg_10[1] <= 1'b0;
        reduced_reg_10[2] <= 1'b0;
        reduced_reg_10[3] <= 1'b0;
        reduced_reg_10[4] <= 1'b0;
        reduced_reg_10[5] <= 1'b0;
        reduced_reg_10[6] <= 1'b0;
        reduced_reg_10[7] <= 1'b0;
        reduced_reg_10[8] <= 1'b0;
        reduced_reg_10[9] <= 1'b0;
        reduced_reg_10[10] <= 1'b0;
        reduced_reg_10[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_10[0] <= reduced_reg_next_10[0];
          reduced_reg_10[1] <= reduced_reg_next_10[1];
          reduced_reg_10[2] <= reduced_reg_next_10[2];
          reduced_reg_10[3] <= reduced_reg_next_10[3];
          reduced_reg_10[4] <= reduced_reg_next_10[4];
          reduced_reg_10[5] <= reduced_reg_next_10[5];
          reduced_reg_10[6] <= reduced_reg_next_10[6];
          reduced_reg_10[7] <= reduced_reg_next_10[7];
          reduced_reg_10[8] <= reduced_reg_next_10[8];
          reduced_reg_10[9] <= reduced_reg_next_10[9];
          reduced_reg_10[10] <= reduced_reg_next_10[10];
          reduced_reg_10[11] <= reduced_reg_next_10[11];
        end
      end
    end

  assign Multiport_Switch7_out1_1 = reduced_reg_10[11];
  assign reduced_reg_next_10[0] = Multiport_Switch7_out1;
  assign reduced_reg_next_10[1] = reduced_reg_10[0];
  assign reduced_reg_next_10[2] = reduced_reg_10[1];
  assign reduced_reg_next_10[3] = reduced_reg_10[2];
  assign reduced_reg_next_10[4] = reduced_reg_10[3];
  assign reduced_reg_next_10[5] = reduced_reg_10[4];
  assign reduced_reg_next_10[6] = reduced_reg_10[5];
  assign reduced_reg_next_10[7] = reduced_reg_10[6];
  assign reduced_reg_next_10[8] = reduced_reg_10[7];
  assign reduced_reg_next_10[9] = reduced_reg_10[8];
  assign reduced_reg_next_10[10] = reduced_reg_10[9];
  assign reduced_reg_next_10[11] = reduced_reg_10[10];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM33 (.clk(clk),
                                             .enb(enb),
                                             .din(In11_re),
                                             .addr(Constant22_out1),
                                             .we(Multiport_Switch7_out1_1),
                                             .dout(Single_Port_RAM33_out1)
                                             );

  assign Out11_re = Single_Port_RAM33_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM21 (.clk(clk),
                                             .enb(enb),
                                             .din(In11_im),
                                             .addr(Constant22_out1),
                                             .we(Multiport_Switch7_out1_1),
                                             .dout(Single_Port_RAM21_out1)
                                             );

  assign Out11_im = Single_Port_RAM21_out1;

  assign Constant30_out1 = 2'b01;



  assign Constant32_out1 = 1'b0;



  assign Constant31_out1 = 1'b1;



  assign Multiport_Switch5_out1 = (In26 == 8'b00000000 ? Constant32_out1 :
              (In26 == 8'b00000001 ? Constant32_out1 :
              (In26 == 8'b00000010 ? Constant32_out1 :
              (In26 == 8'b00000011 ? Constant32_out1 :
              (In26 == 8'b00000100 ? Constant32_out1 :
              (In26 == 8'b00000101 ? Constant32_out1 :
              (In26 == 8'b00000110 ? Constant32_out1 :
              (In26 == 8'b00000111 ? Constant31_out1 :
              (In26 == 8'b00001000 ? Constant32_out1 :
              (In26 == 8'b00001001 ? Constant32_out1 :
              Constant32_out1))))))))));



  always @(posedge clk)
    begin : reduced_11_process
      if (reset_x == 1'b1) begin
        reduced_reg_11[0] <= 1'b0;
        reduced_reg_11[1] <= 1'b0;
        reduced_reg_11[2] <= 1'b0;
        reduced_reg_11[3] <= 1'b0;
        reduced_reg_11[4] <= 1'b0;
        reduced_reg_11[5] <= 1'b0;
        reduced_reg_11[6] <= 1'b0;
        reduced_reg_11[7] <= 1'b0;
        reduced_reg_11[8] <= 1'b0;
        reduced_reg_11[9] <= 1'b0;
        reduced_reg_11[10] <= 1'b0;
        reduced_reg_11[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_11[0] <= reduced_reg_next_11[0];
          reduced_reg_11[1] <= reduced_reg_next_11[1];
          reduced_reg_11[2] <= reduced_reg_next_11[2];
          reduced_reg_11[3] <= reduced_reg_next_11[3];
          reduced_reg_11[4] <= reduced_reg_next_11[4];
          reduced_reg_11[5] <= reduced_reg_next_11[5];
          reduced_reg_11[6] <= reduced_reg_next_11[6];
          reduced_reg_11[7] <= reduced_reg_next_11[7];
          reduced_reg_11[8] <= reduced_reg_next_11[8];
          reduced_reg_11[9] <= reduced_reg_next_11[9];
          reduced_reg_11[10] <= reduced_reg_next_11[10];
          reduced_reg_11[11] <= reduced_reg_next_11[11];
        end
      end
    end

  assign Multiport_Switch5_out1_1 = reduced_reg_11[11];
  assign reduced_reg_next_11[0] = Multiport_Switch5_out1;
  assign reduced_reg_next_11[1] = reduced_reg_11[0];
  assign reduced_reg_next_11[2] = reduced_reg_11[1];
  assign reduced_reg_next_11[3] = reduced_reg_11[2];
  assign reduced_reg_next_11[4] = reduced_reg_11[3];
  assign reduced_reg_next_11[5] = reduced_reg_11[4];
  assign reduced_reg_next_11[6] = reduced_reg_11[5];
  assign reduced_reg_next_11[7] = reduced_reg_11[6];
  assign reduced_reg_next_11[8] = reduced_reg_11[7];
  assign reduced_reg_next_11[9] = reduced_reg_11[8];
  assign reduced_reg_next_11[10] = reduced_reg_11[9];
  assign reduced_reg_next_11[11] = reduced_reg_11[10];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM37 (.clk(clk),
                                             .enb(enb),
                                             .din(In12_re),
                                             .addr(Constant30_out1),
                                             .we(Multiport_Switch5_out1_1),
                                             .dout(Single_Port_RAM37_out1)
                                             );

  assign Out12_re = Single_Port_RAM37_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM35 (.clk(clk),
                                             .enb(enb),
                                             .din(In12_im),
                                             .addr(Constant30_out1),
                                             .we(Multiport_Switch5_out1_1),
                                             .dout(Single_Port_RAM35_out1)
                                             );

  assign Out12_im = Single_Port_RAM35_out1;

  assign Constant33_out1 = 2'b01;



  assign Constant20_out1 = 1'b0;



  assign Constant19_out1 = 1'b1;



  assign Multiport_Switch9_out1 = (In26 == 8'b00000000 ? Constant20_out1 :
              (In26 == 8'b00000001 ? Constant20_out1 :
              (In26 == 8'b00000010 ? Constant20_out1 :
              (In26 == 8'b00000011 ? Constant20_out1 :
              (In26 == 8'b00000100 ? Constant20_out1 :
              (In26 == 8'b00000101 ? Constant20_out1 :
              (In26 == 8'b00000110 ? Constant20_out1 :
              (In26 == 8'b00000111 ? Constant20_out1 :
              (In26 == 8'b00001000 ? Constant19_out1 :
              (In26 == 8'b00001001 ? Constant20_out1 :
              Constant20_out1))))))))));



  always @(posedge clk)
    begin : reduced_12_process
      if (reset_x == 1'b1) begin
        reduced_reg_12[0] <= 1'b0;
        reduced_reg_12[1] <= 1'b0;
        reduced_reg_12[2] <= 1'b0;
        reduced_reg_12[3] <= 1'b0;
        reduced_reg_12[4] <= 1'b0;
        reduced_reg_12[5] <= 1'b0;
        reduced_reg_12[6] <= 1'b0;
        reduced_reg_12[7] <= 1'b0;
        reduced_reg_12[8] <= 1'b0;
        reduced_reg_12[9] <= 1'b0;
        reduced_reg_12[10] <= 1'b0;
        reduced_reg_12[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_12[0] <= reduced_reg_next_12[0];
          reduced_reg_12[1] <= reduced_reg_next_12[1];
          reduced_reg_12[2] <= reduced_reg_next_12[2];
          reduced_reg_12[3] <= reduced_reg_next_12[3];
          reduced_reg_12[4] <= reduced_reg_next_12[4];
          reduced_reg_12[5] <= reduced_reg_next_12[5];
          reduced_reg_12[6] <= reduced_reg_next_12[6];
          reduced_reg_12[7] <= reduced_reg_next_12[7];
          reduced_reg_12[8] <= reduced_reg_next_12[8];
          reduced_reg_12[9] <= reduced_reg_next_12[9];
          reduced_reg_12[10] <= reduced_reg_next_12[10];
          reduced_reg_12[11] <= reduced_reg_next_12[11];
        end
      end
    end

  assign Multiport_Switch9_out1_1 = reduced_reg_12[11];
  assign reduced_reg_next_12[0] = Multiport_Switch9_out1;
  assign reduced_reg_next_12[1] = reduced_reg_12[0];
  assign reduced_reg_next_12[2] = reduced_reg_12[1];
  assign reduced_reg_next_12[3] = reduced_reg_12[2];
  assign reduced_reg_next_12[4] = reduced_reg_12[3];
  assign reduced_reg_next_12[5] = reduced_reg_12[4];
  assign reduced_reg_next_12[6] = reduced_reg_12[5];
  assign reduced_reg_next_12[7] = reduced_reg_12[6];
  assign reduced_reg_next_12[8] = reduced_reg_12[7];
  assign reduced_reg_next_12[9] = reduced_reg_12[8];
  assign reduced_reg_next_12[10] = reduced_reg_12[9];
  assign reduced_reg_next_12[11] = reduced_reg_12[10];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM22 (.clk(clk),
                                             .enb(enb),
                                             .din(In13_re),
                                             .addr(Constant33_out1),
                                             .we(Multiport_Switch9_out1_1),
                                             .dout(Single_Port_RAM22_out1)
                                             );

  assign Out13_re = Single_Port_RAM22_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM39 (.clk(clk),
                                             .enb(enb),
                                             .din(In13_im),
                                             .addr(Constant33_out1),
                                             .we(Multiport_Switch9_out1_1),
                                             .dout(Single_Port_RAM39_out1)
                                             );

  assign Out13_im = Single_Port_RAM39_out1;

  assign Constant21_out1 = 2'b01;



  assign Constant24_out1 = 1'b0;



  assign Constant23_out1 = 1'b1;



  assign Multiport_Switch8_out1 = (In26 == 8'b00000000 ? Constant24_out1 :
              (In26 == 8'b00000001 ? Constant24_out1 :
              (In26 == 8'b00000010 ? Constant24_out1 :
              (In26 == 8'b00000011 ? Constant24_out1 :
              (In26 == 8'b00000100 ? Constant24_out1 :
              (In26 == 8'b00000101 ? Constant24_out1 :
              (In26 == 8'b00000110 ? Constant24_out1 :
              (In26 == 8'b00000111 ? Constant24_out1 :
              (In26 == 8'b00001000 ? Constant24_out1 :
              (In26 == 8'b00001001 ? Constant23_out1 :
              Constant24_out1))))))))));



  always @(posedge clk)
    begin : reduced_13_process
      if (reset_x == 1'b1) begin
        reduced_reg_13[0] <= 1'b0;
        reduced_reg_13[1] <= 1'b0;
        reduced_reg_13[2] <= 1'b0;
        reduced_reg_13[3] <= 1'b0;
        reduced_reg_13[4] <= 1'b0;
        reduced_reg_13[5] <= 1'b0;
        reduced_reg_13[6] <= 1'b0;
        reduced_reg_13[7] <= 1'b0;
        reduced_reg_13[8] <= 1'b0;
        reduced_reg_13[9] <= 1'b0;
        reduced_reg_13[10] <= 1'b0;
        reduced_reg_13[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_13[0] <= reduced_reg_next_13[0];
          reduced_reg_13[1] <= reduced_reg_next_13[1];
          reduced_reg_13[2] <= reduced_reg_next_13[2];
          reduced_reg_13[3] <= reduced_reg_next_13[3];
          reduced_reg_13[4] <= reduced_reg_next_13[4];
          reduced_reg_13[5] <= reduced_reg_next_13[5];
          reduced_reg_13[6] <= reduced_reg_next_13[6];
          reduced_reg_13[7] <= reduced_reg_next_13[7];
          reduced_reg_13[8] <= reduced_reg_next_13[8];
          reduced_reg_13[9] <= reduced_reg_next_13[9];
          reduced_reg_13[10] <= reduced_reg_next_13[10];
          reduced_reg_13[11] <= reduced_reg_next_13[11];
        end
      end
    end

  assign Multiport_Switch8_out1_1 = reduced_reg_13[11];
  assign reduced_reg_next_13[0] = Multiport_Switch8_out1;
  assign reduced_reg_next_13[1] = reduced_reg_13[0];
  assign reduced_reg_next_13[2] = reduced_reg_13[1];
  assign reduced_reg_next_13[3] = reduced_reg_13[2];
  assign reduced_reg_next_13[4] = reduced_reg_13[3];
  assign reduced_reg_next_13[5] = reduced_reg_13[4];
  assign reduced_reg_next_13[6] = reduced_reg_13[5];
  assign reduced_reg_next_13[7] = reduced_reg_13[6];
  assign reduced_reg_next_13[8] = reduced_reg_13[7];
  assign reduced_reg_next_13[9] = reduced_reg_13[8];
  assign reduced_reg_next_13[10] = reduced_reg_13[9];
  assign reduced_reg_next_13[11] = reduced_reg_13[10];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM26 (.clk(clk),
                                             .enb(enb),
                                             .din(In14_re),
                                             .addr(Constant21_out1),
                                             .we(Multiport_Switch8_out1_1),
                                             .dout(Single_Port_RAM26_out1)
                                             );

  assign Out14_re = Single_Port_RAM26_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM24 (.clk(clk),
                                             .enb(enb),
                                             .din(In14_im),
                                             .addr(Constant21_out1),
                                             .we(Multiport_Switch8_out1_1),
                                             .dout(Single_Port_RAM24_out1)
                                             );

  assign Out14_im = Single_Port_RAM24_out1;

  assign Constant25_out1 = 2'b01;



  assign Constant27_out1 = 1'b0;



  assign Constant26_out1 = 1'b1;



  assign Multiport_Switch10_out1 = (In26 == 8'b00000000 ? Constant27_out1 :
              (In26 == 8'b00000001 ? Constant27_out1 :
              (In26 == 8'b00000010 ? Constant27_out1 :
              (In26 == 8'b00000011 ? Constant27_out1 :
              (In26 == 8'b00000100 ? Constant27_out1 :
              (In26 == 8'b00000101 ? Constant27_out1 :
              (In26 == 8'b00000110 ? Constant27_out1 :
              (In26 == 8'b00000111 ? Constant27_out1 :
              (In26 == 8'b00001000 ? Constant27_out1 :
              (In26 == 8'b00001001 ? Constant27_out1 :
              Constant26_out1))))))))));



  always @(posedge clk)
    begin : reduced_14_process
      if (reset_x == 1'b1) begin
        reduced_reg_14[0] <= 1'b0;
        reduced_reg_14[1] <= 1'b0;
        reduced_reg_14[2] <= 1'b0;
        reduced_reg_14[3] <= 1'b0;
        reduced_reg_14[4] <= 1'b0;
        reduced_reg_14[5] <= 1'b0;
        reduced_reg_14[6] <= 1'b0;
        reduced_reg_14[7] <= 1'b0;
        reduced_reg_14[8] <= 1'b0;
        reduced_reg_14[9] <= 1'b0;
        reduced_reg_14[10] <= 1'b0;
        reduced_reg_14[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_14[0] <= reduced_reg_next_14[0];
          reduced_reg_14[1] <= reduced_reg_next_14[1];
          reduced_reg_14[2] <= reduced_reg_next_14[2];
          reduced_reg_14[3] <= reduced_reg_next_14[3];
          reduced_reg_14[4] <= reduced_reg_next_14[4];
          reduced_reg_14[5] <= reduced_reg_next_14[5];
          reduced_reg_14[6] <= reduced_reg_next_14[6];
          reduced_reg_14[7] <= reduced_reg_next_14[7];
          reduced_reg_14[8] <= reduced_reg_next_14[8];
          reduced_reg_14[9] <= reduced_reg_next_14[9];
          reduced_reg_14[10] <= reduced_reg_next_14[10];
          reduced_reg_14[11] <= reduced_reg_next_14[11];
        end
      end
    end

  assign Multiport_Switch10_out1_1 = reduced_reg_14[11];
  assign reduced_reg_next_14[0] = Multiport_Switch10_out1;
  assign reduced_reg_next_14[1] = reduced_reg_14[0];
  assign reduced_reg_next_14[2] = reduced_reg_14[1];
  assign reduced_reg_next_14[3] = reduced_reg_14[2];
  assign reduced_reg_next_14[4] = reduced_reg_14[3];
  assign reduced_reg_next_14[5] = reduced_reg_14[4];
  assign reduced_reg_next_14[6] = reduced_reg_14[5];
  assign reduced_reg_next_14[7] = reduced_reg_14[6];
  assign reduced_reg_next_14[8] = reduced_reg_14[7];
  assign reduced_reg_next_14[9] = reduced_reg_14[8];
  assign reduced_reg_next_14[10] = reduced_reg_14[9];
  assign reduced_reg_next_14[11] = reduced_reg_14[10];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM30 (.clk(clk),
                                             .enb(enb),
                                             .din(In15_re),
                                             .addr(Constant25_out1),
                                             .we(Multiport_Switch10_out1_1),
                                             .dout(Single_Port_RAM30_out1)
                                             );

  assign Out15_re = Single_Port_RAM30_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM28 (.clk(clk),
                                             .enb(enb),
                                             .din(In15_im),
                                             .addr(Constant25_out1),
                                             .we(Multiport_Switch10_out1_1),
                                             .dout(Single_Port_RAM28_out1)
                                             );

  assign Out15_im = Single_Port_RAM28_out1;

  always @(posedge clk)
    begin : reduced_15_process
      if (reset_x == 1'b1) begin
        reduced_reg_15[0] <= 1'b0;
        reduced_reg_15[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_15[0] <= reduced_reg_next_15[0];
          reduced_reg_15[1] <= reduced_reg_next_15[1];
        end
      end
    end

  assign Multiport_Switch7_out1_2 = reduced_reg_15[1];
  assign reduced_reg_next_15[0] = Multiport_Switch7_out1_1;
  assign reduced_reg_next_15[1] = reduced_reg_15[0];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM34 (.clk(clk),
                                             .enb(enb),
                                             .din(In16_re),
                                             .addr(Constant22_out1),
                                             .we(Multiport_Switch7_out1_2),
                                             .dout(Single_Port_RAM34_out1)
                                             );

  assign Out16_re = Single_Port_RAM34_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM32 (.clk(clk),
                                             .enb(enb),
                                             .din(In16_im),
                                             .addr(Constant22_out1),
                                             .we(Multiport_Switch7_out1_2),
                                             .dout(Single_Port_RAM32_out1)
                                             );

  assign Out16_im = Single_Port_RAM32_out1;

  always @(posedge clk)
    begin : reduced_16_process
      if (reset_x == 1'b1) begin
        reduced_reg_16[0] <= 1'b0;
        reduced_reg_16[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_16[0] <= reduced_reg_next_16[0];
          reduced_reg_16[1] <= reduced_reg_next_16[1];
        end
      end
    end

  assign Multiport_Switch5_out1_2 = reduced_reg_16[1];
  assign reduced_reg_next_16[0] = Multiport_Switch5_out1_1;
  assign reduced_reg_next_16[1] = reduced_reg_16[0];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM38 (.clk(clk),
                                             .enb(enb),
                                             .din(In17_re),
                                             .addr(Constant30_out1),
                                             .we(Multiport_Switch5_out1_2),
                                             .dout(Single_Port_RAM38_out1)
                                             );

  assign Out17_re = Single_Port_RAM38_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM36 (.clk(clk),
                                             .enb(enb),
                                             .din(In17_im),
                                             .addr(Constant30_out1),
                                             .we(Multiport_Switch5_out1_2),
                                             .dout(Single_Port_RAM36_out1)
                                             );

  assign Out17_im = Single_Port_RAM36_out1;

  always @(posedge clk)
    begin : reduced_17_process
      if (reset_x == 1'b1) begin
        reduced_reg_17[0] <= 1'b0;
        reduced_reg_17[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_17[0] <= reduced_reg_next_17[0];
          reduced_reg_17[1] <= reduced_reg_next_17[1];
        end
      end
    end

  assign Multiport_Switch9_out1_2 = reduced_reg_17[1];
  assign reduced_reg_next_17[0] = Multiport_Switch9_out1_1;
  assign reduced_reg_next_17[1] = reduced_reg_17[0];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM23 (.clk(clk),
                                             .enb(enb),
                                             .din(In18_re),
                                             .addr(Constant33_out1),
                                             .we(Multiport_Switch9_out1_2),
                                             .dout(Single_Port_RAM23_out1)
                                             );

  assign Out18_re = Single_Port_RAM23_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM40 (.clk(clk),
                                             .enb(enb),
                                             .din(In18_im),
                                             .addr(Constant33_out1),
                                             .we(Multiport_Switch9_out1_2),
                                             .dout(Single_Port_RAM40_out1)
                                             );

  assign Out18_im = Single_Port_RAM40_out1;

  always @(posedge clk)
    begin : reduced_18_process
      if (reset_x == 1'b1) begin
        reduced_reg_18[0] <= 1'b0;
        reduced_reg_18[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_18[0] <= reduced_reg_next_18[0];
          reduced_reg_18[1] <= reduced_reg_next_18[1];
        end
      end
    end

  assign Multiport_Switch8_out1_2 = reduced_reg_18[1];
  assign reduced_reg_next_18[0] = Multiport_Switch8_out1_1;
  assign reduced_reg_next_18[1] = reduced_reg_18[0];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM27 (.clk(clk),
                                             .enb(enb),
                                             .din(In19_re),
                                             .addr(Constant21_out1),
                                             .we(Multiport_Switch8_out1_2),
                                             .dout(Single_Port_RAM27_out1)
                                             );

  assign Out19_re = Single_Port_RAM27_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM25 (.clk(clk),
                                             .enb(enb),
                                             .din(In19_im),
                                             .addr(Constant21_out1),
                                             .we(Multiport_Switch8_out1_2),
                                             .dout(Single_Port_RAM25_out1)
                                             );

  assign Out19_im = Single_Port_RAM25_out1;

  always @(posedge clk)
    begin : reduced_19_process
      if (reset_x == 1'b1) begin
        reduced_reg_19[0] <= 1'b0;
        reduced_reg_19[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_19[0] <= reduced_reg_next_19[0];
          reduced_reg_19[1] <= reduced_reg_next_19[1];
        end
      end
    end

  assign Multiport_Switch10_out1_2 = reduced_reg_19[1];
  assign reduced_reg_next_19[0] = Multiport_Switch10_out1_1;
  assign reduced_reg_next_19[1] = reduced_reg_19[0];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM31 (.clk(clk),
                                             .enb(enb),
                                             .din(In20_re),
                                             .addr(Constant25_out1),
                                             .we(Multiport_Switch10_out1_2),
                                             .dout(Single_Port_RAM31_out1)
                                             );

  assign Out20_re = Single_Port_RAM31_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM29 (.clk(clk),
                                             .enb(enb),
                                             .din(In20_im),
                                             .addr(Constant25_out1),
                                             .we(Multiport_Switch10_out1_2),
                                             .dout(Single_Port_RAM29_out1)
                                             );

  assign Out20_im = Single_Port_RAM29_out1;

  assign Constant37_out1 = 2'b01;



  assign Constant44_out1 = 1'b0;



  assign Constant43_out1 = 1'b1;



  assign Multiport_Switch12_out1 = (In26 == 8'b00000000 ? Constant44_out1 :
              (In26 == 8'b00000001 ? Constant44_out1 :
              (In26 == 8'b00000010 ? Constant44_out1 :
              (In26 == 8'b00000011 ? Constant44_out1 :
              (In26 == 8'b00000100 ? Constant44_out1 :
              (In26 == 8'b00000101 ? Constant44_out1 :
              (In26 == 8'b00000110 ? Constant43_out1 :
              (In26 == 8'b00000111 ? Constant44_out1 :
              (In26 == 8'b00001000 ? Constant44_out1 :
              (In26 == 8'b00001001 ? Constant44_out1 :
              Constant44_out1))))))))));



  always @(posedge clk)
    begin : reduced_20_process
      if (reset_x == 1'b1) begin
        reduced_reg_20[0] <= 1'b0;
        reduced_reg_20[1] <= 1'b0;
        reduced_reg_20[2] <= 1'b0;
        reduced_reg_20[3] <= 1'b0;
        reduced_reg_20[4] <= 1'b0;
        reduced_reg_20[5] <= 1'b0;
        reduced_reg_20[6] <= 1'b0;
        reduced_reg_20[7] <= 1'b0;
        reduced_reg_20[8] <= 1'b0;
        reduced_reg_20[9] <= 1'b0;
        reduced_reg_20[10] <= 1'b0;
        reduced_reg_20[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_20[0] <= reduced_reg_next_20[0];
          reduced_reg_20[1] <= reduced_reg_next_20[1];
          reduced_reg_20[2] <= reduced_reg_next_20[2];
          reduced_reg_20[3] <= reduced_reg_next_20[3];
          reduced_reg_20[4] <= reduced_reg_next_20[4];
          reduced_reg_20[5] <= reduced_reg_next_20[5];
          reduced_reg_20[6] <= reduced_reg_next_20[6];
          reduced_reg_20[7] <= reduced_reg_next_20[7];
          reduced_reg_20[8] <= reduced_reg_next_20[8];
          reduced_reg_20[9] <= reduced_reg_next_20[9];
          reduced_reg_20[10] <= reduced_reg_next_20[10];
          reduced_reg_20[11] <= reduced_reg_next_20[11];
        end
      end
    end

  assign Multiport_Switch12_out1_1 = reduced_reg_20[11];
  assign reduced_reg_next_20[0] = Multiport_Switch12_out1;
  assign reduced_reg_next_20[1] = reduced_reg_20[0];
  assign reduced_reg_next_20[2] = reduced_reg_20[1];
  assign reduced_reg_next_20[3] = reduced_reg_20[2];
  assign reduced_reg_next_20[4] = reduced_reg_20[3];
  assign reduced_reg_next_20[5] = reduced_reg_20[4];
  assign reduced_reg_next_20[6] = reduced_reg_20[5];
  assign reduced_reg_next_20[7] = reduced_reg_20[6];
  assign reduced_reg_next_20[8] = reduced_reg_20[7];
  assign reduced_reg_next_20[9] = reduced_reg_20[8];
  assign reduced_reg_next_20[10] = reduced_reg_20[9];
  assign reduced_reg_next_20[11] = reduced_reg_20[10];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM47 (.clk(clk),
                                             .enb(enb),
                                             .din(In21_re),
                                             .addr(Constant37_out1),
                                             .we(Multiport_Switch12_out1_1),
                                             .dout(Single_Port_RAM47_out1)
                                             );

  assign Out21_re = Single_Port_RAM47_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM41 (.clk(clk),
                                             .enb(enb),
                                             .din(In21_im),
                                             .addr(Constant37_out1),
                                             .we(Multiport_Switch12_out1_1),
                                             .dout(Single_Port_RAM41_out1)
                                             );

  assign Out21_im = Single_Port_RAM41_out1;

  assign Constant45_out1 = 2'b01;



  assign Constant47_out1 = 1'b0;



  assign Constant46_out1 = 1'b1;



  assign Multiport_Switch11_out1 = (In26 == 8'b00000000 ? Constant47_out1 :
              (In26 == 8'b00000001 ? Constant47_out1 :
              (In26 == 8'b00000010 ? Constant47_out1 :
              (In26 == 8'b00000011 ? Constant47_out1 :
              (In26 == 8'b00000100 ? Constant47_out1 :
              (In26 == 8'b00000101 ? Constant47_out1 :
              (In26 == 8'b00000110 ? Constant47_out1 :
              (In26 == 8'b00000111 ? Constant46_out1 :
              (In26 == 8'b00001000 ? Constant47_out1 :
              (In26 == 8'b00001001 ? Constant47_out1 :
              Constant47_out1))))))))));



  always @(posedge clk)
    begin : reduced_21_process
      if (reset_x == 1'b1) begin
        reduced_reg_21[0] <= 1'b0;
        reduced_reg_21[1] <= 1'b0;
        reduced_reg_21[2] <= 1'b0;
        reduced_reg_21[3] <= 1'b0;
        reduced_reg_21[4] <= 1'b0;
        reduced_reg_21[5] <= 1'b0;
        reduced_reg_21[6] <= 1'b0;
        reduced_reg_21[7] <= 1'b0;
        reduced_reg_21[8] <= 1'b0;
        reduced_reg_21[9] <= 1'b0;
        reduced_reg_21[10] <= 1'b0;
        reduced_reg_21[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_21[0] <= reduced_reg_next_21[0];
          reduced_reg_21[1] <= reduced_reg_next_21[1];
          reduced_reg_21[2] <= reduced_reg_next_21[2];
          reduced_reg_21[3] <= reduced_reg_next_21[3];
          reduced_reg_21[4] <= reduced_reg_next_21[4];
          reduced_reg_21[5] <= reduced_reg_next_21[5];
          reduced_reg_21[6] <= reduced_reg_next_21[6];
          reduced_reg_21[7] <= reduced_reg_next_21[7];
          reduced_reg_21[8] <= reduced_reg_next_21[8];
          reduced_reg_21[9] <= reduced_reg_next_21[9];
          reduced_reg_21[10] <= reduced_reg_next_21[10];
          reduced_reg_21[11] <= reduced_reg_next_21[11];
        end
      end
    end

  assign Multiport_Switch11_out1_1 = reduced_reg_21[11];
  assign reduced_reg_next_21[0] = Multiport_Switch11_out1;
  assign reduced_reg_next_21[1] = reduced_reg_21[0];
  assign reduced_reg_next_21[2] = reduced_reg_21[1];
  assign reduced_reg_next_21[3] = reduced_reg_21[2];
  assign reduced_reg_next_21[4] = reduced_reg_21[3];
  assign reduced_reg_next_21[5] = reduced_reg_21[4];
  assign reduced_reg_next_21[6] = reduced_reg_21[5];
  assign reduced_reg_next_21[7] = reduced_reg_21[6];
  assign reduced_reg_next_21[8] = reduced_reg_21[7];
  assign reduced_reg_next_21[9] = reduced_reg_21[8];
  assign reduced_reg_next_21[10] = reduced_reg_21[9];
  assign reduced_reg_next_21[11] = reduced_reg_21[10];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM49 (.clk(clk),
                                             .enb(enb),
                                             .din(In22_re),
                                             .addr(Constant45_out1),
                                             .we(Multiport_Switch11_out1_1),
                                             .dout(Single_Port_RAM49_out1)
                                             );

  assign Out22_re = Single_Port_RAM49_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM48 (.clk(clk),
                                             .enb(enb),
                                             .din(In22_im),
                                             .addr(Constant45_out1),
                                             .we(Multiport_Switch11_out1_1),
                                             .dout(Single_Port_RAM48_out1)
                                             );

  assign Out22_im = Single_Port_RAM48_out1;

  assign Constant48_out1 = 2'b01;



  assign Constant35_out1 = 1'b0;



  assign Constant34_out1 = 1'b1;



  assign Multiport_Switch14_out1 = (In26 == 8'b00000000 ? Constant35_out1 :
              (In26 == 8'b00000001 ? Constant35_out1 :
              (In26 == 8'b00000010 ? Constant35_out1 :
              (In26 == 8'b00000011 ? Constant35_out1 :
              (In26 == 8'b00000100 ? Constant35_out1 :
              (In26 == 8'b00000101 ? Constant35_out1 :
              (In26 == 8'b00000110 ? Constant35_out1 :
              (In26 == 8'b00000111 ? Constant35_out1 :
              (In26 == 8'b00001000 ? Constant34_out1 :
              (In26 == 8'b00001001 ? Constant35_out1 :
              Constant35_out1))))))))));



  always @(posedge clk)
    begin : reduced_22_process
      if (reset_x == 1'b1) begin
        reduced_reg_22[0] <= 1'b0;
        reduced_reg_22[1] <= 1'b0;
        reduced_reg_22[2] <= 1'b0;
        reduced_reg_22[3] <= 1'b0;
        reduced_reg_22[4] <= 1'b0;
        reduced_reg_22[5] <= 1'b0;
        reduced_reg_22[6] <= 1'b0;
        reduced_reg_22[7] <= 1'b0;
        reduced_reg_22[8] <= 1'b0;
        reduced_reg_22[9] <= 1'b0;
        reduced_reg_22[10] <= 1'b0;
        reduced_reg_22[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_22[0] <= reduced_reg_next_22[0];
          reduced_reg_22[1] <= reduced_reg_next_22[1];
          reduced_reg_22[2] <= reduced_reg_next_22[2];
          reduced_reg_22[3] <= reduced_reg_next_22[3];
          reduced_reg_22[4] <= reduced_reg_next_22[4];
          reduced_reg_22[5] <= reduced_reg_next_22[5];
          reduced_reg_22[6] <= reduced_reg_next_22[6];
          reduced_reg_22[7] <= reduced_reg_next_22[7];
          reduced_reg_22[8] <= reduced_reg_next_22[8];
          reduced_reg_22[9] <= reduced_reg_next_22[9];
          reduced_reg_22[10] <= reduced_reg_next_22[10];
          reduced_reg_22[11] <= reduced_reg_next_22[11];
        end
      end
    end

  assign Multiport_Switch14_out1_1 = reduced_reg_22[11];
  assign reduced_reg_next_22[0] = Multiport_Switch14_out1;
  assign reduced_reg_next_22[1] = reduced_reg_22[0];
  assign reduced_reg_next_22[2] = reduced_reg_22[1];
  assign reduced_reg_next_22[3] = reduced_reg_22[2];
  assign reduced_reg_next_22[4] = reduced_reg_22[3];
  assign reduced_reg_next_22[5] = reduced_reg_22[4];
  assign reduced_reg_next_22[6] = reduced_reg_22[5];
  assign reduced_reg_next_22[7] = reduced_reg_22[6];
  assign reduced_reg_next_22[8] = reduced_reg_22[7];
  assign reduced_reg_next_22[9] = reduced_reg_22[8];
  assign reduced_reg_next_22[10] = reduced_reg_22[9];
  assign reduced_reg_next_22[11] = reduced_reg_22[10];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM42 (.clk(clk),
                                             .enb(enb),
                                             .din(In23_re),
                                             .addr(Constant48_out1),
                                             .we(Multiport_Switch14_out1_1),
                                             .dout(Single_Port_RAM42_out1)
                                             );

  assign Out23_re = Single_Port_RAM42_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM50 (.clk(clk),
                                             .enb(enb),
                                             .din(In23_im),
                                             .addr(Constant48_out1),
                                             .we(Multiport_Switch14_out1_1),
                                             .dout(Single_Port_RAM50_out1)
                                             );

  assign Out23_im = Single_Port_RAM50_out1;

  assign Constant36_out1 = 2'b01;



  assign Constant39_out1 = 1'b0;



  assign Constant38_out1 = 1'b1;



  assign Multiport_Switch13_out1 = (In26 == 8'b00000000 ? Constant39_out1 :
              (In26 == 8'b00000001 ? Constant39_out1 :
              (In26 == 8'b00000010 ? Constant39_out1 :
              (In26 == 8'b00000011 ? Constant39_out1 :
              (In26 == 8'b00000100 ? Constant39_out1 :
              (In26 == 8'b00000101 ? Constant39_out1 :
              (In26 == 8'b00000110 ? Constant39_out1 :
              (In26 == 8'b00000111 ? Constant39_out1 :
              (In26 == 8'b00001000 ? Constant39_out1 :
              (In26 == 8'b00001001 ? Constant38_out1 :
              Constant39_out1))))))))));



  always @(posedge clk)
    begin : reduced_23_process
      if (reset_x == 1'b1) begin
        reduced_reg_23[0] <= 1'b0;
        reduced_reg_23[1] <= 1'b0;
        reduced_reg_23[2] <= 1'b0;
        reduced_reg_23[3] <= 1'b0;
        reduced_reg_23[4] <= 1'b0;
        reduced_reg_23[5] <= 1'b0;
        reduced_reg_23[6] <= 1'b0;
        reduced_reg_23[7] <= 1'b0;
        reduced_reg_23[8] <= 1'b0;
        reduced_reg_23[9] <= 1'b0;
        reduced_reg_23[10] <= 1'b0;
        reduced_reg_23[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_23[0] <= reduced_reg_next_23[0];
          reduced_reg_23[1] <= reduced_reg_next_23[1];
          reduced_reg_23[2] <= reduced_reg_next_23[2];
          reduced_reg_23[3] <= reduced_reg_next_23[3];
          reduced_reg_23[4] <= reduced_reg_next_23[4];
          reduced_reg_23[5] <= reduced_reg_next_23[5];
          reduced_reg_23[6] <= reduced_reg_next_23[6];
          reduced_reg_23[7] <= reduced_reg_next_23[7];
          reduced_reg_23[8] <= reduced_reg_next_23[8];
          reduced_reg_23[9] <= reduced_reg_next_23[9];
          reduced_reg_23[10] <= reduced_reg_next_23[10];
          reduced_reg_23[11] <= reduced_reg_next_23[11];
        end
      end
    end

  assign Multiport_Switch13_out1_1 = reduced_reg_23[11];
  assign reduced_reg_next_23[0] = Multiport_Switch13_out1;
  assign reduced_reg_next_23[1] = reduced_reg_23[0];
  assign reduced_reg_next_23[2] = reduced_reg_23[1];
  assign reduced_reg_next_23[3] = reduced_reg_23[2];
  assign reduced_reg_next_23[4] = reduced_reg_23[3];
  assign reduced_reg_next_23[5] = reduced_reg_23[4];
  assign reduced_reg_next_23[6] = reduced_reg_23[5];
  assign reduced_reg_next_23[7] = reduced_reg_23[6];
  assign reduced_reg_next_23[8] = reduced_reg_23[7];
  assign reduced_reg_next_23[9] = reduced_reg_23[8];
  assign reduced_reg_next_23[10] = reduced_reg_23[9];
  assign reduced_reg_next_23[11] = reduced_reg_23[10];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM44 (.clk(clk),
                                             .enb(enb),
                                             .din(In24_re),
                                             .addr(Constant36_out1),
                                             .we(Multiport_Switch13_out1_1),
                                             .dout(Single_Port_RAM44_out1)
                                             );

  assign Out24_re = Single_Port_RAM44_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM43 (.clk(clk),
                                             .enb(enb),
                                             .din(In24_im),
                                             .addr(Constant36_out1),
                                             .we(Multiport_Switch13_out1_1),
                                             .dout(Single_Port_RAM43_out1)
                                             );

  assign Out24_im = Single_Port_RAM43_out1;

  assign Constant40_out1 = 2'b01;



  assign Constant42_out1 = 1'b0;



  assign Constant41_out1 = 1'b1;



  assign Multiport_Switch15_out1 = (In26 == 8'b00000000 ? Constant42_out1 :
              (In26 == 8'b00000001 ? Constant42_out1 :
              (In26 == 8'b00000010 ? Constant42_out1 :
              (In26 == 8'b00000011 ? Constant42_out1 :
              (In26 == 8'b00000100 ? Constant42_out1 :
              (In26 == 8'b00000101 ? Constant42_out1 :
              (In26 == 8'b00000110 ? Constant42_out1 :
              (In26 == 8'b00000111 ? Constant42_out1 :
              (In26 == 8'b00001000 ? Constant42_out1 :
              (In26 == 8'b00001001 ? Constant42_out1 :
              Constant41_out1))))))))));



  always @(posedge clk)
    begin : reduced_24_process
      if (reset_x == 1'b1) begin
        reduced_reg_24[0] <= 1'b0;
        reduced_reg_24[1] <= 1'b0;
        reduced_reg_24[2] <= 1'b0;
        reduced_reg_24[3] <= 1'b0;
        reduced_reg_24[4] <= 1'b0;
        reduced_reg_24[5] <= 1'b0;
        reduced_reg_24[6] <= 1'b0;
        reduced_reg_24[7] <= 1'b0;
        reduced_reg_24[8] <= 1'b0;
        reduced_reg_24[9] <= 1'b0;
        reduced_reg_24[10] <= 1'b0;
        reduced_reg_24[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_24[0] <= reduced_reg_next_24[0];
          reduced_reg_24[1] <= reduced_reg_next_24[1];
          reduced_reg_24[2] <= reduced_reg_next_24[2];
          reduced_reg_24[3] <= reduced_reg_next_24[3];
          reduced_reg_24[4] <= reduced_reg_next_24[4];
          reduced_reg_24[5] <= reduced_reg_next_24[5];
          reduced_reg_24[6] <= reduced_reg_next_24[6];
          reduced_reg_24[7] <= reduced_reg_next_24[7];
          reduced_reg_24[8] <= reduced_reg_next_24[8];
          reduced_reg_24[9] <= reduced_reg_next_24[9];
          reduced_reg_24[10] <= reduced_reg_next_24[10];
          reduced_reg_24[11] <= reduced_reg_next_24[11];
        end
      end
    end

  assign Multiport_Switch15_out1_1 = reduced_reg_24[11];
  assign reduced_reg_next_24[0] = Multiport_Switch15_out1;
  assign reduced_reg_next_24[1] = reduced_reg_24[0];
  assign reduced_reg_next_24[2] = reduced_reg_24[1];
  assign reduced_reg_next_24[3] = reduced_reg_24[2];
  assign reduced_reg_next_24[4] = reduced_reg_24[3];
  assign reduced_reg_next_24[5] = reduced_reg_24[4];
  assign reduced_reg_next_24[6] = reduced_reg_24[5];
  assign reduced_reg_next_24[7] = reduced_reg_24[6];
  assign reduced_reg_next_24[8] = reduced_reg_24[7];
  assign reduced_reg_next_24[9] = reduced_reg_24[8];
  assign reduced_reg_next_24[10] = reduced_reg_24[9];
  assign reduced_reg_next_24[11] = reduced_reg_24[10];



  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM46 (.clk(clk),
                                             .enb(enb),
                                             .din(In25_re),
                                             .addr(Constant40_out1),
                                             .we(Multiport_Switch15_out1_1),
                                             .dout(Single_Port_RAM46_out1)
                                             );

  assign Out25_re = Single_Port_RAM46_out1;

  SinglePortRAM_generic #(.AddrWidth(2),
                          .DataWidth(37)
                          )
                        u_Single_Port_RAM45 (.clk(clk),
                                             .enb(enb),
                                             .din(In25_im),
                                             .addr(Constant40_out1),
                                             .we(Multiport_Switch15_out1_1),
                                             .dout(Single_Port_RAM45_out1)
                                             );

  assign Out25_im = Single_Port_RAM45_out1;

endmodule  // save_DFT50_swapping_values

