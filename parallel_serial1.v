// -------------------------------------------------------------
// 
// File Name: C:\Users\Carlos Cajas\Desktop\DSP\nuevo_chale\FDHT_N\parallel_serial1.v
// Created: 2020-12-08 16:13:16
// 
// Generated by MATLAB 9.3 and HDL Coder 3.11
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: parallel_serial1
// Source Path: FDHT_N/FDHT/parallel_serial1
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module parallel_serial1
          (clk,
           reset_x,
           enb,
           In1,
           Out1,
           Out2,
           Out3,
           Out4,
           Out5,
           Out6,
           Out7,
           Out8,
           Out9,
           Out10,
           Out11,
           Out12,
           Out13,
           Out14,
           Out15,
           Out16,
           Out17,
           Out18,
           Out19,
           Out20,
           Out21,
           Out22,
           Out23,
           Out24,
           Out25,
           Out26,
           Out27,
           Out28,
           Out29,
           Out30,
           Out31,
           Out32,
           Out33,
           Out34,
           Out35,
           Out36,
           Out37,
           Out38,
           Out39,
           Out40,
           Out41,
           Out42,
           Out43,
           Out44,
           Out45,
           Out46,
           Out47,
           Out48,
           Out49,
           Out50,
           Out51,
           Out52,
           Out53,
           Out54,
           Out55,
           Out56,
           Out57,
           Out58,
           Out59,
           Out60,
           Out61,
           Out62,
           Out63,
           Out64);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [14:0] In1;  // sfix15_En5
  output  signed [14:0] Out1;  // sfix15_En5
  output  signed [14:0] Out2;  // sfix15_En5
  output  signed [14:0] Out3;  // sfix15_En5
  output  signed [14:0] Out4;  // sfix15_En5
  output  signed [14:0] Out5;  // sfix15_En5
  output  signed [14:0] Out6;  // sfix15_En5
  output  signed [14:0] Out7;  // sfix15_En5
  output  signed [14:0] Out8;  // sfix15_En5
  output  signed [14:0] Out9;  // sfix15_En5
  output  signed [14:0] Out10;  // sfix15_En5
  output  signed [14:0] Out11;  // sfix15_En5
  output  signed [14:0] Out12;  // sfix15_En5
  output  signed [14:0] Out13;  // sfix15_En5
  output  signed [14:0] Out14;  // sfix15_En5
  output  signed [14:0] Out15;  // sfix15_En5
  output  signed [14:0] Out16;  // sfix15_En5
  output  signed [14:0] Out17;  // sfix15_En5
  output  signed [14:0] Out18;  // sfix15_En5
  output  signed [14:0] Out19;  // sfix15_En5
  output  signed [14:0] Out20;  // sfix15_En5
  output  signed [14:0] Out21;  // sfix15_En5
  output  signed [14:0] Out22;  // sfix15_En5
  output  signed [14:0] Out23;  // sfix15_En5
  output  signed [14:0] Out24;  // sfix15_En5
  output  signed [14:0] Out25;  // sfix15_En5
  output  signed [14:0] Out26;  // sfix15_En5
  output  signed [14:0] Out27;  // sfix15_En5
  output  signed [14:0] Out28;  // sfix15_En5
  output  signed [14:0] Out29;  // sfix15_En5
  output  signed [14:0] Out30;  // sfix15_En5
  output  signed [14:0] Out31;  // sfix15_En5
  output  signed [14:0] Out32;  // sfix15_En5
  output  signed [14:0] Out33;  // sfix15_En5
  output  signed [14:0] Out34;  // sfix15_En5
  output  signed [14:0] Out35;  // sfix15_En5
  output  signed [14:0] Out36;  // sfix15_En5
  output  signed [14:0] Out37;  // sfix15_En5
  output  signed [14:0] Out38;  // sfix15_En5
  output  signed [14:0] Out39;  // sfix15_En5
  output  signed [14:0] Out40;  // sfix15_En5
  output  signed [14:0] Out41;  // sfix15_En5
  output  signed [14:0] Out42;  // sfix15_En5
  output  signed [14:0] Out43;  // sfix15_En5
  output  signed [14:0] Out44;  // sfix15_En5
  output  signed [14:0] Out45;  // sfix15_En5
  output  signed [14:0] Out46;  // sfix15_En5
  output  signed [14:0] Out47;  // sfix15_En5
  output  signed [14:0] Out48;  // sfix15_En5
  output  signed [14:0] Out49;  // sfix15_En5
  output  signed [14:0] Out50;  // sfix15_En5
  output  signed [14:0] Out51;  // sfix15_En5
  output  signed [14:0] Out52;  // sfix15_En5
  output  signed [14:0] Out53;  // sfix15_En5
  output  signed [14:0] Out54;  // sfix15_En5
  output  signed [14:0] Out55;  // sfix15_En5
  output  signed [14:0] Out56;  // sfix15_En5
  output  signed [14:0] Out57;  // sfix15_En5
  output  signed [14:0] Out58;  // sfix15_En5
  output  signed [14:0] Out59;  // sfix15_En5
  output  signed [14:0] Out60;  // sfix15_En5
  output  signed [14:0] Out61;  // sfix15_En5
  output  signed [14:0] Out62;  // sfix15_En5
  output  signed [14:0] Out63;  // sfix15_En5
  output  signed [14:0] Out64;  // sfix15_En5

  reg signed [14:0] Delay62_out1;  // sfix15_En5
  reg signed [14:0] Delay61_out1;  // sfix15_En5
  reg signed [14:0] Delay60_out1;  // sfix15_En5
  reg signed [14:0] Delay59_out1;  // sfix15_En5
  reg signed [14:0] Delay58_out1;  // sfix15_En5
  reg signed [14:0] Delay57_out1;  // sfix15_En5
  reg signed [14:0] Delay56_out1;  // sfix15_En5
  reg signed [14:0] Delay55_out1;  // sfix15_En5
  reg signed [14:0] Delay54_out1;  // sfix15_En5
  reg signed [14:0] Delay53_out1;  // sfix15_En5
  reg signed [14:0] Delay52_out1;  // sfix15_En5
  reg signed [14:0] Delay51_out1;  // sfix15_En5
  reg signed [14:0] Delay50_out1;  // sfix15_En5
  reg signed [14:0] Delay49_out1;  // sfix15_En5
  reg signed [14:0] Delay_out1;  // sfix15_En5
  reg signed [14:0] Delay1_out1;  // sfix15_En5
  reg signed [14:0] Delay2_out1;  // sfix15_En5
  reg signed [14:0] Delay3_out1;  // sfix15_En5
  reg signed [14:0] Delay4_out1;  // sfix15_En5
  reg signed [14:0] Delay5_out1;  // sfix15_En5
  reg signed [14:0] Delay6_out1;  // sfix15_En5
  reg signed [14:0] Delay7_out1;  // sfix15_En5
  reg signed [14:0] Delay8_out1;  // sfix15_En5
  reg signed [14:0] Delay9_out1;  // sfix15_En5
  reg signed [14:0] Delay10_out1;  // sfix15_En5
  reg signed [14:0] Delay11_out1;  // sfix15_En5
  reg signed [14:0] Delay12_out1;  // sfix15_En5
  reg signed [14:0] Delay13_out1;  // sfix15_En5
  reg signed [14:0] Delay14_out1;  // sfix15_En5
  reg signed [14:0] Delay15_out1;  // sfix15_En5
  reg signed [14:0] Delay16_out1;  // sfix15_En5
  reg signed [14:0] Delay17_out1;  // sfix15_En5
  reg signed [14:0] Delay18_out1;  // sfix15_En5
  reg signed [14:0] Delay19_out1;  // sfix15_En5
  reg signed [14:0] Delay20_out1;  // sfix15_En5
  reg signed [14:0] Delay21_out1;  // sfix15_En5
  reg signed [14:0] Delay22_out1;  // sfix15_En5
  reg signed [14:0] Delay23_out1;  // sfix15_En5
  reg signed [14:0] Delay24_out1;  // sfix15_En5
  reg signed [14:0] Delay25_out1;  // sfix15_En5
  reg signed [14:0] Delay26_out1;  // sfix15_En5
  reg signed [14:0] Delay27_out1;  // sfix15_En5
  reg signed [14:0] Delay28_out1;  // sfix15_En5
  reg signed [14:0] Delay29_out1;  // sfix15_En5
  reg signed [14:0] Delay30_out1;  // sfix15_En5
  reg signed [14:0] Delay31_out1;  // sfix15_En5
  reg signed [14:0] Delay32_out1;  // sfix15_En5
  reg signed [14:0] Delay33_out1;  // sfix15_En5
  reg signed [14:0] Delay34_out1;  // sfix15_En5
  reg signed [14:0] Delay35_out1;  // sfix15_En5
  reg signed [14:0] Delay36_out1;  // sfix15_En5
  reg signed [14:0] Delay37_out1;  // sfix15_En5
  reg signed [14:0] Delay38_out1;  // sfix15_En5
  reg signed [14:0] Delay39_out1;  // sfix15_En5
  reg signed [14:0] Delay40_out1;  // sfix15_En5
  reg signed [14:0] Delay41_out1;  // sfix15_En5
  reg signed [14:0] Delay42_out1;  // sfix15_En5
  reg signed [14:0] Delay43_out1;  // sfix15_En5
  reg signed [14:0] Delay44_out1;  // sfix15_En5
  reg signed [14:0] Delay45_out1;  // sfix15_En5
  reg signed [14:0] Delay46_out1;  // sfix15_En5
  reg signed [14:0] Delay47_out1;  // sfix15_En5
  reg signed [14:0] Delay48_out1;  // sfix15_En5


  always @(posedge clk)
    begin : Delay62_process
      if (reset_x == 1'b1) begin
        Delay62_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay62_out1 <= In1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay61_process
      if (reset_x == 1'b1) begin
        Delay61_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay61_out1 <= Delay62_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay60_process
      if (reset_x == 1'b1) begin
        Delay60_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay60_out1 <= Delay61_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay59_process
      if (reset_x == 1'b1) begin
        Delay59_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay59_out1 <= Delay60_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay58_process
      if (reset_x == 1'b1) begin
        Delay58_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay58_out1 <= Delay59_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay57_process
      if (reset_x == 1'b1) begin
        Delay57_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay57_out1 <= Delay58_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay56_process
      if (reset_x == 1'b1) begin
        Delay56_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay56_out1 <= Delay57_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay55_process
      if (reset_x == 1'b1) begin
        Delay55_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay55_out1 <= Delay56_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay54_process
      if (reset_x == 1'b1) begin
        Delay54_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay54_out1 <= Delay55_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay53_process
      if (reset_x == 1'b1) begin
        Delay53_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay53_out1 <= Delay54_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay52_process
      if (reset_x == 1'b1) begin
        Delay52_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay52_out1 <= Delay53_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay51_process
      if (reset_x == 1'b1) begin
        Delay51_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay51_out1 <= Delay52_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay50_process
      if (reset_x == 1'b1) begin
        Delay50_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay50_out1 <= Delay51_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay49_process
      if (reset_x == 1'b1) begin
        Delay49_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay49_out1 <= Delay50_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay_process
      if (reset_x == 1'b1) begin
        Delay_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Delay49_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        Delay1_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Delay_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay2_process
      if (reset_x == 1'b1) begin
        Delay2_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Delay1_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay3_process
      if (reset_x == 1'b1) begin
        Delay3_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Delay2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay4_process
      if (reset_x == 1'b1) begin
        Delay4_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Delay3_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay5_process
      if (reset_x == 1'b1) begin
        Delay5_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Delay4_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay6_process
      if (reset_x == 1'b1) begin
        Delay6_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Delay5_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay7_process
      if (reset_x == 1'b1) begin
        Delay7_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Delay6_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay8_process
      if (reset_x == 1'b1) begin
        Delay8_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Delay7_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay9_process
      if (reset_x == 1'b1) begin
        Delay9_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Delay8_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay10_process
      if (reset_x == 1'b1) begin
        Delay10_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= Delay9_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay11_process
      if (reset_x == 1'b1) begin
        Delay11_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= Delay10_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay12_process
      if (reset_x == 1'b1) begin
        Delay12_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= Delay11_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay13_process
      if (reset_x == 1'b1) begin
        Delay13_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay13_out1 <= Delay12_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay14_process
      if (reset_x == 1'b1) begin
        Delay14_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= Delay13_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay15_process
      if (reset_x == 1'b1) begin
        Delay15_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay15_out1 <= Delay14_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay16_process
      if (reset_x == 1'b1) begin
        Delay16_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay16_out1 <= Delay15_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay17_process
      if (reset_x == 1'b1) begin
        Delay17_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay17_out1 <= Delay16_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay18_process
      if (reset_x == 1'b1) begin
        Delay18_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay18_out1 <= Delay17_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay19_process
      if (reset_x == 1'b1) begin
        Delay19_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay19_out1 <= Delay18_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay20_process
      if (reset_x == 1'b1) begin
        Delay20_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay20_out1 <= Delay19_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay21_process
      if (reset_x == 1'b1) begin
        Delay21_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay21_out1 <= Delay20_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay22_process
      if (reset_x == 1'b1) begin
        Delay22_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay22_out1 <= Delay21_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay23_process
      if (reset_x == 1'b1) begin
        Delay23_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay23_out1 <= Delay22_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay24_process
      if (reset_x == 1'b1) begin
        Delay24_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay24_out1 <= Delay23_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay25_process
      if (reset_x == 1'b1) begin
        Delay25_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay25_out1 <= Delay24_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay26_process
      if (reset_x == 1'b1) begin
        Delay26_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay26_out1 <= Delay25_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay27_process
      if (reset_x == 1'b1) begin
        Delay27_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay27_out1 <= Delay26_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay28_process
      if (reset_x == 1'b1) begin
        Delay28_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay28_out1 <= Delay27_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay29_process
      if (reset_x == 1'b1) begin
        Delay29_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay29_out1 <= Delay28_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay30_process
      if (reset_x == 1'b1) begin
        Delay30_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay30_out1 <= Delay29_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay31_process
      if (reset_x == 1'b1) begin
        Delay31_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay31_out1 <= Delay30_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay32_process
      if (reset_x == 1'b1) begin
        Delay32_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay32_out1 <= Delay31_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay33_process
      if (reset_x == 1'b1) begin
        Delay33_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay33_out1 <= Delay32_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay34_process
      if (reset_x == 1'b1) begin
        Delay34_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay34_out1 <= Delay33_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay35_process
      if (reset_x == 1'b1) begin
        Delay35_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay35_out1 <= Delay34_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay36_process
      if (reset_x == 1'b1) begin
        Delay36_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay36_out1 <= Delay35_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay37_process
      if (reset_x == 1'b1) begin
        Delay37_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay37_out1 <= Delay36_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay38_process
      if (reset_x == 1'b1) begin
        Delay38_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay38_out1 <= Delay37_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay39_process
      if (reset_x == 1'b1) begin
        Delay39_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay39_out1 <= Delay38_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay40_process
      if (reset_x == 1'b1) begin
        Delay40_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay40_out1 <= Delay39_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay41_process
      if (reset_x == 1'b1) begin
        Delay41_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay41_out1 <= Delay40_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay42_process
      if (reset_x == 1'b1) begin
        Delay42_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay42_out1 <= Delay41_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay43_process
      if (reset_x == 1'b1) begin
        Delay43_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay43_out1 <= Delay42_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay44_process
      if (reset_x == 1'b1) begin
        Delay44_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay44_out1 <= Delay43_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay45_process
      if (reset_x == 1'b1) begin
        Delay45_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay45_out1 <= Delay44_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay46_process
      if (reset_x == 1'b1) begin
        Delay46_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay46_out1 <= Delay45_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay47_process
      if (reset_x == 1'b1) begin
        Delay47_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay47_out1 <= Delay46_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay48_process
      if (reset_x == 1'b1) begin
        Delay48_out1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          Delay48_out1 <= Delay47_out1;
        end
      end
    end



  assign Out1 = Delay48_out1;

  assign Out2 = Delay47_out1;

  assign Out3 = Delay46_out1;

  assign Out4 = Delay45_out1;

  assign Out5 = Delay44_out1;

  assign Out6 = Delay43_out1;

  assign Out7 = Delay42_out1;

  assign Out8 = Delay41_out1;

  assign Out9 = Delay40_out1;

  assign Out10 = Delay39_out1;

  assign Out11 = Delay38_out1;

  assign Out12 = Delay37_out1;

  assign Out13 = Delay36_out1;

  assign Out14 = Delay35_out1;

  assign Out15 = Delay34_out1;

  assign Out16 = Delay33_out1;

  assign Out17 = Delay32_out1;

  assign Out18 = Delay31_out1;

  assign Out19 = Delay30_out1;

  assign Out20 = Delay29_out1;

  assign Out21 = Delay28_out1;

  assign Out22 = Delay27_out1;

  assign Out23 = Delay26_out1;

  assign Out24 = Delay25_out1;

  assign Out25 = Delay24_out1;

  assign Out26 = Delay23_out1;

  assign Out27 = Delay22_out1;

  assign Out28 = Delay21_out1;

  assign Out29 = Delay20_out1;

  assign Out30 = Delay19_out1;

  assign Out31 = Delay18_out1;

  assign Out32 = Delay17_out1;

  assign Out33 = Delay16_out1;

  assign Out34 = Delay15_out1;

  assign Out35 = Delay14_out1;

  assign Out36 = Delay13_out1;

  assign Out37 = Delay12_out1;

  assign Out38 = Delay11_out1;

  assign Out39 = Delay10_out1;

  assign Out40 = Delay9_out1;

  assign Out41 = Delay8_out1;

  assign Out42 = Delay7_out1;

  assign Out43 = Delay6_out1;

  assign Out44 = Delay5_out1;

  assign Out45 = Delay4_out1;

  assign Out46 = Delay3_out1;

  assign Out47 = Delay2_out1;

  assign Out48 = Delay1_out1;

  assign Out49 = Delay_out1;

  assign Out50 = Delay49_out1;

  assign Out51 = Delay50_out1;

  assign Out52 = Delay51_out1;

  assign Out53 = Delay52_out1;

  assign Out54 = Delay53_out1;

  assign Out55 = Delay54_out1;

  assign Out56 = Delay55_out1;

  assign Out57 = Delay56_out1;

  assign Out58 = Delay57_out1;

  assign Out59 = Delay58_out1;

  assign Out60 = Delay59_out1;

  assign Out61 = Delay60_out1;

  assign Out62 = Delay61_out1;

  assign Out63 = Delay62_out1;

  assign Out64 = In1;

endmodule  // parallel_serial1

